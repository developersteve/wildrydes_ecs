{"version":3,"file":"w3cTraceContextPropagator.js","sourceRoot":"","sources":["../../../src/propagator/w3cTraceContextPropagator.ts"],"names":[],"mappings":";;;AAAA,4CAAkE;AAClE,8CAAgE;AAEhE;;;;;GAKG;AACH,MAAM,qBAAqB,GAAG;IAC5B,sBAAsB,EAAE,kGAAkG;CAC3H,CAAC;AAEF,MAAa,+BAAgC,SAAQ,gCAAyB;IACnE,MAAM,CAAC,OAAgB,EAAE,OAAgB,EAAE,MAAqB;QACvE,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,KAAK,MAAM,GAAG,IAAI,qBAAqB,EAAE;gBACvC,IACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;qBACjB,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;qBAC/B,QAAQ,CAAC,GAAG,CAAC,EAChB;oBACA,UAAI,CAAC,KAAK,CAAC,mDAAmD,GAAG,cAAc,CAAC,CAAC;oBACjF,OAAO;iBACR;aACF;SACF;QAED,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;CACF;AAjBD,0EAiBC","sourcesContent":["import { diag, Context, TextMapSetter } from '@opentelemetry/api';\nimport { W3CTraceContextPropagator } from '@opentelemetry/core';\n\n/*\n * List of keys in the carrier that signal the need not to inject\n * traceparent/tracestate headers, e.g., when the outgoing request\n * is signed with a digest, abnd us adding HTTP headers would\n * invalidate the signature.\n */\nconst contextKeysSkipInject = [\n  'x-amz-content-sha256', // Amazon Sigv4, see https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html\n];\n\nexport class LumigoW3CTraceContextPropagator extends W3CTraceContextPropagator {\n  override inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    if (typeof carrier === 'object') {\n      for (const key of contextKeysSkipInject) {\n        if (\n          Object.keys(carrier)\n            .map((key) => key.toLowerCase())\n            .includes(key)\n        ) {\n          diag.debug(`Skipping injection of trace context due to key '${key}' in carrier`);\n          return;\n        }\n      }\n    }\n\n    super.inject(context, carrier, setter);\n  }\n}\n"]}