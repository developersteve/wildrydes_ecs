"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LumigoW3CTraceContextPropagator = void 0;
const api_1 = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
/*
 * List of keys in the carrier that signal the need not to inject
 * traceparent/tracestate headers, e.g., when the outgoing request
 * is signed with a digest, abnd us adding HTTP headers would
 * invalidate the signature.
 */
const contextKeysSkipInject = [
    'x-amz-content-sha256', // Amazon Sigv4, see https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html
];
class LumigoW3CTraceContextPropagator extends core_1.W3CTraceContextPropagator {
    inject(context, carrier, setter) {
        if (typeof carrier === 'object') {
            for (const key of contextKeysSkipInject) {
                if (Object.keys(carrier)
                    .map((key) => key.toLowerCase())
                    .includes(key)) {
                    api_1.diag.debug(`Skipping injection of trace context due to key '${key}' in carrier`);
                    return;
                }
            }
        }
        super.inject(context, carrier, setter);
    }
}
exports.LumigoW3CTraceContextPropagator = LumigoW3CTraceContextPropagator;
//# sourceMappingURL=w3cTraceContextPropagator.js.map