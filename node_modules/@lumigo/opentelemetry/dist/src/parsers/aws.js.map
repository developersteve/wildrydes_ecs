{"version":3,"file":"aws.js","sourceRoot":"","sources":["../../../src/parsers/aws.ts"],"names":[],"mappings":";;;AAAA,wCAAoC;AACpC,oCAAgF;AAChF,kDAA8C;AAE9C,iDAAgD;AAChD,iDAA6C;AAG7C,MAAM,wBAAwB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;IACnD,IAAI,MAAM,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;QAC3C,OAAO,IAAA,eAAO,EAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC9B;SAAM,IAAI,MAAM,KAAK,YAAY,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;QACpD,OAAO,IAAA,eAAO,EAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC7B;SAAM,IAAI,MAAM,KAAK,YAAY,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;QACpD,OAAO,IAAA,eAAO,EAAC,OAAO,CAAC,GAAG,CAAC,CAAC;KAC7B;SAAM,IAAI,MAAM,KAAK,gBAAgB,EAAE;QACtC,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,cAAc,EAAE;YAClB,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,SAAS,CAAC,YAAY,CAAC,EAAE;gBAC3B,OAAO,IAAA,eAAO,EAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aAC3C;iBAAM,IAAI,SAAS,CAAC,eAAe,CAAC,EAAE;gBACrC,OAAO,IAAA,eAAO,EAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;aAC7C;SACF;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;IACnD,MAAM,SAAS,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IACpE,IAAI,CAAC,SAAS,IAAI,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACrE,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7C;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEK,MAAM,cAAc,GAAG,CAAC,WAAW,EAAE,EAAE;IAC5C,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IAC3D,MAAM,cAAc,GAClB,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,UAAU,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAEjF,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,MAAM,YAAY,GAAG,wBAAwB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC3E,MAAM,SAAS,GAAG,wBAAwB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAExE,OAAO;QACL,mBAAmB,EAAE,YAAY;QACjC,qBAAqB,EAAE,cAAc;QACrC,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AAdW,QAAA,cAAc,kBAczB;AAEF,eAAe;AACR,MAAM,KAAK,GAAG,CAAC,aAAa,EAAE,EAAE;IACrC,OAAO,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAC9C,CAAC,CAAC;AAFW,QAAA,KAAK,SAEhB;AAEK,MAAM,wBAAwB,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAAtD,QAAA,wBAAwB,4BAA8B;AAE5D,MAAM,YAAY,GAAG,CAAC,WAA2B,EAAE,YAA6B,EAAE,EAAE;IACzF,IAAI,CAAC,YAAY;QAAE,OAAO,EAAE,CAAC;IAC7B,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IACtC,IAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,YAAY,GAAG,IAAA,aAAK,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAA,gCAAwB,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAC3F,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,YAAY,CAAC;IAClD,MAAM,MAAM,GAAG,eAAe,CAAC,kBAAkB,CAAC,IAAI,eAAe,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAC/F,MAAM,cAAc,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;IACxD,OAAO;QACL,mBAAmB,EAAE,YAAY;QACjC,qBAAqB,EAAE,cAAc;QACrC,gBAAgB,EAAE,MAAM;KACzB,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,YAAY,gBAavB;AAEK,MAAM,SAAS,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;IACrD,IAAI,CAAC,YAAY;QAAE,OAAO,EAAE,CAAC;IAC7B,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IACtC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC;IACvC,MAAM,iBAAiB,GAAG,OAAO,CAAC,CAAC,CAAC,IAAA,wBAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1E,MAAM,kBAAkB,GAAG,OAAO,CAAC,CAAC,CAAC,IAAA,oBAAQ,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACnE,MAAM,YAAY,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACnF,MAAM,SAAS,GAAG,kBAAkB;QAClC,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,CAAC;QACrF,CAAC,CAAC,SAAS,CAAC;IAEd,OAAO;QACL,mBAAmB,EAAE,YAAY;QACjC,eAAe,EAAE,YAAY;QAC7B,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,SAAS,aAgBpB;AAEK,MAAM,WAAW,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;IACvD,IAAI,CAAC,YAAY;QAAE,OAAO,EAAE,CAAC;IAC7B,IAAI,QAAQ,GAAG,IAAA,iBAAS,EAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACpD,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,EAAE,CAAC;KACf;IACD,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;QACvB,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,YAAY,CAAC;QAC5C,IAAI,SAAS,IAAI,SAAS,CAAC,iBAAiB,CAAC,EAAE;YAC7C,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC;SACnD;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAbW,QAAA,WAAW,eAatB;AAEK,MAAM,iBAAiB,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;IAC7D,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IACtC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,IAAI,EAAE,CAAC;IAC7C,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,MAAM,aAAa,GAAG,WAAW,CAAC,OAAO;QACvC,CAAC,CAAC,IAAA,wBAAgB,EAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC1E,CAAC,CAAC,SAAS,CAAC;IACd,MAAM,UAAU,GAAG,WAAW,CAAC,OAAO;QACpC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;QACnD,CAAC,CAAC,SAAS,CAAC;IACd,OAAO;QACL,oBAAoB,EAAE,aAAa;QACnC,UAAU,EAAE,UAAU;KACvB,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,iBAAiB,qBAe5B;AAEK,MAAM,SAAS,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;;IACrD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IACtC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,IAAI,EAAE,CAAC;IAC7C,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,IAAA,wBAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACtE,MAAM,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC,IAAA,oBAAQ,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC9D,MAAM,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3E,MAAM,cAAc,GAAmB,EAAE,mBAAmB,EAAE,YAAY,EAAE,CAAC;IAC7E,cAAc,CAAC,SAAS;QACtB,IAAA,eAAO,EAAC,aAAa,EAAE,CAAC,qBAAqB,EAAE,mBAAmB,EAAE,WAAW,CAAC,EAAE,SAAS,CAAC;YAC5F,IAAA,eAAO,EACL,aAAa,EACb;gBACE,0BAA0B;gBAC1B,wBAAwB;gBACxB,6BAA6B;gBAC7B,CAAC;gBACD,WAAW;aACZ,EACD,SAAS,CACV;YACD,IAAA,eAAO,EACL,aAAa,EACb;gBACE,0BAA0B;gBAC1B,wBAAwB;gBACxB,6BAA6B;gBAC7B,WAAW;aACZ,EACD,SAAS,CACV;YACD,IAAA,eAAO,EACL,aAAa,EACb,CAAC,wBAAwB,EAAE,sBAAsB,EAAE,SAAS,EAAE,WAAW,CAAC,EAC1E,SAAS,CACV;YACD,IAAA,eAAO,EACL,aAAa,EACb,CAAC,wBAAwB,EAAE,sBAAsB,EAAE,SAAS,EAAE,CAAC,EAAE,WAAW,CAAC,EAC7E,SAAS,CACV,CAAC;IACJ,MAAM,QAAQ,GAAG,CAAA,MAAA,MAAA,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,sBAAsB,0CAAE,oBAAoB,0CAAE,OAAO,0CAAE,IAAI,KAAI,EAAE,CAAC;IAClG,IAAI,QAAQ,CAAC,MAAM,CAAC,oBAAQ,CAAC,iCAAiC,CAAC,GAAG,CAAC,EAAE;QACnE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG;YAClB,EAAE,EAAE,uBAAW,CAAC,eAAe,CAAC,EAAE,CAAC;YACnC,QAAQ,EAAE,IAAI;YACd,WAAW,EAAE,oBAAQ,CAAC,cAAc,CAAC,GAAG;YACxC,cAAc,EAAE,CAAC,cAAc,CAAC,SAAS,CAAC;YAC1C,KAAK,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE;SAClC,CAAC;QACF,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;YACzC,OAAO,EAAE,CAAC,WAAW,EAAE,GAAG,oBAAQ,CAAC,sBAAsB,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC;SAClF,CAAC,CAAC;KACJ;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAvDW,QAAA,SAAS,aAuDpB;AAEK,MAAM,aAAa,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;IACzD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IACtC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,YAAY,CAAC;IACvC,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI;QACF,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;KACxD;IAAC,OAAO,CAAC,EAAE;QACV,gBAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC;QAC/C,WAAW,GAAG,EAAE,CAAC;KAClB;IACD,MAAM,YAAY,GAAG,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC;IACxF,MAAM,cAAc,GAAG,EAAE,mBAAmB,EAAE,YAAY,EAAE,CAAC;IAC7D,IAAI,WAAW,CAAC,gBAAgB,CAAC,EAAE;QACjC,aAAa;QACb,cAAc,CAAC,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC;KAC1D;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE;QACzC,aAAa;QACb,cAAc,CAAC,UAAU,GAAG,WAAW,CAAC,SAAS,CAAC;aAC/C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC;aAC/B,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvB;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAxBW,QAAA,aAAa,iBAwBxB;AAEK,MAAM,SAAS,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE;IACrD,IAAI,CAAC,YAAY;QAAE,OAAO,EAAE,CAAC;IAC7B,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,YAAY,CAAC;IAC5C,MAAM,SAAS,GAAG,SAAS;QACzB,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,SAAS,CAAC,kBAAkB,CAAC;QAChE,CAAC,CAAC,SAAS,CAAC;IAEd,OAAO,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;AACxC,CAAC,CAAC;AARW,QAAA,SAAS,aAQpB","sourcesContent":["import { logger } from '../logging';\nimport { md5Hash, parseQueryParams, removeDuplicates, safeGet } from '../utils';\nimport { traverse } from '../tools/xmlToJson';\nimport { HttpRawRequest, HttpRawResponse } from '@lumigo/node-core/lib/types/spans';\nimport { CommonUtils } from '@lumigo/node-core';\nimport { Triggers } from '@lumigo/node-core';\nimport { AwsServiceData } from '../spans/awsSpan';\n\nconst extractDynamodbMessageId = (reqBody, method) => {\n  if (method === 'PutItem' && reqBody['Item']) {\n    return md5Hash(reqBody.Item);\n  } else if (method === 'UpdateItem' && reqBody['Key']) {\n    return md5Hash(reqBody.Key);\n  } else if (method === 'DeleteItem' && reqBody['Key']) {\n    return md5Hash(reqBody.Key);\n  } else if (method === 'BatchWriteItem') {\n    const firstTableName = Object.keys(reqBody.RequestItems)[0];\n    if (firstTableName) {\n      const firstItem = reqBody.RequestItems[firstTableName][0];\n      if (firstItem['PutRequest']) {\n        return md5Hash(firstItem.PutRequest.Item);\n      } else if (firstItem['DeleteRequest']) {\n        return md5Hash(firstItem.DeleteRequest.Key);\n      }\n    }\n  }\n  return undefined;\n};\n\nconst extractDynamodbTableName = (reqBody, method) => {\n  const tableName = (reqBody['TableName'] && reqBody.TableName) || '';\n  if (!tableName && ['BatchWriteItem', 'BatchGetItem'].includes(method)) {\n    return Object.keys(reqBody.RequestItems)[0];\n  }\n  return tableName;\n};\n\nexport const dynamodbParser = (requestData) => {\n  const { headers: reqHeaders, body: reqBody } = requestData;\n  const dynamodbMethod =\n    (reqHeaders['x-amz-target'] && reqHeaders['x-amz-target'].split('.')[1]) || '';\n\n  const reqBodyJSON = (!!reqBody && JSON.parse(reqBody)) || {};\n  const resourceName = extractDynamodbTableName(reqBodyJSON, dynamodbMethod);\n  const messageId = extractDynamodbMessageId(reqBodyJSON, dynamodbMethod);\n\n  return {\n    'aws.resource.name': resourceName,\n    'aws.dynamodb.method': dynamodbMethod,\n    messageId,\n  };\n};\n\n// non-official\nexport const isArn = (arnToValidate) => {\n  return arnToValidate.startsWith('arn:aws:');\n};\n\nexport const extractLambdaNameFromArn = (arn) => arn.split(':')[6];\n\nexport const lambdaParser = (requestData: HttpRawRequest, responseData: HttpRawResponse) => {\n  if (!responseData) return {};\n  const { path, headers } = requestData;\n  let resourceName = decodeURIComponent(path).split('/')[3];\n  resourceName = isArn(resourceName) ? extractLambdaNameFromArn(resourceName) : resourceName;\n  const { headers: responseHeaders } = responseData;\n  const spanId = responseHeaders['x-amzn-requestid'] || responseHeaders['x-amz-requestid'] || '';\n  const invocationType = headers['x-amz-invocation-type'];\n  return {\n    'aws.resource.name': resourceName,\n    'aws.invocation.type': invocationType,\n    'aws.request.id': spanId,\n  };\n};\n\nexport const snsParser = (requestData, responseData) => {\n  if (!responseData) return {};\n  const { body: reqBody } = requestData;\n  const { body: resBody } = responseData;\n  const parsedRequestBody = reqBody ? parseQueryParams(reqBody) : undefined;\n  const parsedResponseBody = resBody ? traverse(resBody) : undefined;\n  const resourceName = parsedRequestBody ? parsedRequestBody['TopicArn'] : undefined;\n  const messageId = parsedResponseBody\n    ? ((parsedResponseBody['PublishResponse'] || {})['PublishResult'] || {})['MessageId']\n    : undefined;\n\n  return {\n    'aws.resource.name': resourceName,\n    'aws.targetArn': resourceName,\n    messageId,\n  };\n};\n\nexport const apigwParser = (requestData, responseData) => {\n  if (!responseData) return {};\n  let baseData = awsParser(requestData, responseData);\n  if (!baseData) {\n    baseData = {};\n  }\n  if (!baseData.messageId) {\n    const { headers: resHeader } = responseData;\n    if (resHeader && resHeader['apigw-requestid']) {\n      baseData.messageId = resHeader['apigw-requestid'];\n    }\n  }\n  return baseData;\n};\n\nexport const eventBridgeParser = (requestData, responseData) => {\n  const { body: reqBody } = requestData;\n  const { body: resBody } = responseData || {};\n  const reqBodyJSON = (!!reqBody && JSON.parse(reqBody)) || {};\n  const resBodyJSON = (!!resBody && JSON.parse(resBody)) || {};\n  const resourceNames = reqBodyJSON.Entries\n    ? removeDuplicates(reqBodyJSON.Entries.map((entry) => entry.EventBusName))\n    : undefined;\n  const messageIds = resBodyJSON.Entries\n    ? resBodyJSON.Entries.map((entry) => entry.EventId)\n    : undefined;\n  return {\n    'aws.resource.names': resourceNames,\n    messageIds: messageIds,\n  };\n};\n\nexport const sqsParser = (requestData, responseData) => {\n  const { body: reqBody } = requestData;\n  const { body: resBody } = responseData || {};\n  const parsedReqBody = reqBody ? parseQueryParams(reqBody) : undefined;\n  const parsedResBody = resBody ? traverse(resBody) : undefined;\n  const resourceName = parsedReqBody ? parsedReqBody['QueueUrl'] : undefined;\n  const awsServiceData: AwsServiceData = { 'aws.resource.name': resourceName };\n  awsServiceData.messageId =\n    safeGet(parsedResBody, ['SendMessageResponse', 'SendMessageResult', 'MessageId'], undefined) ||\n    safeGet(\n      parsedResBody,\n      [\n        'SendMessageBatchResponse',\n        'SendMessageBatchResult',\n        'SendMessageBatchResultEntry',\n        0,\n        'MessageId',\n      ],\n      undefined\n    ) ||\n    safeGet(\n      parsedResBody,\n      [\n        'SendMessageBatchResponse',\n        'SendMessageBatchResult',\n        'SendMessageBatchResultEntry',\n        'MessageId',\n      ],\n      undefined\n    ) ||\n    safeGet(\n      parsedResBody,\n      ['ReceiveMessageResponse', 'ReceiveMessageResult', 'Message', 'MessageId'],\n      undefined\n    ) ||\n    safeGet(\n      parsedResBody,\n      ['ReceiveMessageResponse', 'ReceiveMessageResult', 'Message', 0, 'MessageId'],\n      undefined\n    );\n  const innerRaw = parsedResBody?.ReceiveMessageResponse?.ReceiveMessageResult?.Message?.Body || '';\n  if (innerRaw.search(Triggers.INNER_MESSAGES_IDENTIFIER_PATTERN) > 0) {\n    const inner = JSON.parse(innerRaw.replace(/&quot;/g, '\"'));\n    const mainTrigger = {\n      id: CommonUtils.getRandomString(10),\n      targetId: null,\n      triggeredBy: Triggers.MessageTrigger.SQS,\n      fromMessageIds: [awsServiceData.messageId],\n      extra: { resource: resourceName },\n    };\n    awsServiceData.lumigoData = JSON.stringify({\n      trigger: [mainTrigger, ...Triggers.recursiveParseTriggers(inner, mainTrigger.id)],\n    });\n  }\n  return awsServiceData;\n};\n\nexport const kinesisParser = (requestData, responseData) => {\n  const { body: reqBody } = requestData;\n  const { body: resBody } = responseData;\n  const reqBodyJSON = (!!reqBody && JSON.parse(reqBody)) || {};\n  let resBodyJSON = {};\n  try {\n    resBodyJSON = (!!resBody && JSON.parse(resBody)) || {};\n  } catch (e) {\n    logger.debug(`Unable to parse response, ${e}`);\n    resBodyJSON = {};\n  }\n  const resourceName = (reqBodyJSON['StreamName'] && reqBodyJSON.StreamName) || undefined;\n  const awsServiceData = { 'aws.resource.name': resourceName };\n  if (resBodyJSON['SequenceNumber']) {\n    // @ts-ignore\n    awsServiceData.messageId = resBodyJSON['SequenceNumber'];\n  }\n  if (Array.isArray(resBodyJSON['Records'])) {\n    // @ts-ignore\n    awsServiceData.messageIds = resBodyJSON['Records']\n      .map((r) => r['SequenceNumber'])\n      .filter((x) => !!x);\n  }\n  return awsServiceData;\n};\n\nexport const awsParser = (requestData, responseData) => {\n  if (!responseData) return {};\n  const { headers: resHeader } = responseData;\n  const messageId = resHeader\n    ? resHeader['x-amzn-requestid'] || resHeader['x-amz-request-id']\n    : undefined;\n\n  return messageId ? { messageId } : {};\n};\n"]}