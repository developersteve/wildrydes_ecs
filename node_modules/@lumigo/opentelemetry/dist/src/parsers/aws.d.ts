import { HttpRawRequest, HttpRawResponse } from '@lumigo/node-core/lib/types/spans';
import { AwsServiceData } from '../spans/awsSpan';
export declare const dynamodbParser: (requestData: any) => {
    'aws.resource.name': any;
    'aws.dynamodb.method': any;
    messageId: string;
};
export declare const isArn: (arnToValidate: any) => any;
export declare const extractLambdaNameFromArn: (arn: any) => any;
export declare const lambdaParser: (requestData: HttpRawRequest, responseData: HttpRawResponse) => {
    'aws.resource.name'?: undefined;
    'aws.invocation.type'?: undefined;
    'aws.request.id'?: undefined;
} | {
    'aws.resource.name': string;
    'aws.invocation.type': string;
    'aws.request.id': string;
};
export declare const snsParser: (requestData: any, responseData: any) => {
    'aws.resource.name'?: undefined;
    'aws.targetArn'?: undefined;
    messageId?: undefined;
} | {
    'aws.resource.name': any;
    'aws.targetArn': any;
    messageId: any;
};
export declare const apigwParser: (requestData: any, responseData: any) => {
    messageId?: undefined;
} | {
    messageId: any;
};
export declare const eventBridgeParser: (requestData: any, responseData: any) => {
    'aws.resource.names': unknown[];
    messageIds: any;
};
export declare const sqsParser: (requestData: any, responseData: any) => AwsServiceData;
export declare const kinesisParser: (requestData: any, responseData: any) => {
    'aws.resource.name': any;
};
export declare const awsParser: (requestData: any, responseData: any) => {
    messageId?: undefined;
} | {
    messageId: any;
};
//# sourceMappingURL=aws.d.ts.map