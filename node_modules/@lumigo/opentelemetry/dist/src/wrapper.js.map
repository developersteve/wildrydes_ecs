{"version":3,"file":"wrapper.js","sourceRoot":"","sources":["../../src/wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { registerInstrumentations, InstrumentationOption } from '@opentelemetry/instrumentation';\nimport { detectResources, envDetector, processDetector, Resource } from '@opentelemetry/resources';\nimport {\n  BasicTracerProvider,\n  BatchSpanProcessor,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\n\nimport { report } from './dependencies';\nimport { FileSpanExporter } from './exporters';\nimport LumigoExpressInstrumentation from './instrumentations/express/ExpressInstrumentation';\nimport LumigoHttpInstrumentation from './instrumentations/https/HttpInstrumentation';\nimport LumigoMongoDBInstrumentation from './instrumentations/mongodb/MongoDBInstrumentation';\nimport { extractEnvVars, getMaxSize } from './utils';\nimport * as awsResourceDetectors from '@opentelemetry/resource-detector-aws';\nimport { LumigoDistroDetector, LumigoKubernetesDetector } from './resources/detectors';\nimport { LumigoW3CTraceContextPropagator } from './propagator/w3cTraceContextPropagator';\nimport { LUMIGO_DISTRO_VERSION } from './resources/detectors/LumigoDistroDetector';\nimport { CommonUtils } from '@lumigo/node-core';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface ProcessEnv {\n      LUMIGO_DEBUG?: string;\n      LUMIGO_DEBUG_SPANDUMP?: string;\n      LUMIGO_ENDPOINT?: string;\n      LUMIGO_REPORT_DEPENDENCIES?: string;\n      LUMIGO_SWITCH_OFF?: string;\n      LUMIGO_TRACER_TOKEN?: string;\n    }\n  }\n}\n\nconst DEFAULT_LUMIGO_ENDPOINT = 'https://ga-otlp.lumigo-tracer-edge.golumigo.com/v1/traces';\nconst DEFAULT_DEPENDENCIES_ENDPOINT =\n  'https://ga-otlp.lumigo-tracer-edge.golumigo.com/v1/dependencies';\n\nimport { logger } from './logging';\n\nconst lumigoEndpoint = process.env.LUMIGO_ENDPOINT || DEFAULT_LUMIGO_ENDPOINT;\n\nlet isTraceInitialized = false;\n\nfunction reportInitError(err: Error) {\n  logger.error(\n    'An error occurred while initializing the Lumigo OpenTelemetry Distro: no telemetry will be collected and sent to Lumigo.',\n    err\n  );\n}\n\nexport interface LumigoSdkInitialization {\n  readonly tracerProvider: BasicTracerProvider;\n}\n\nconst trace = async (): Promise<LumigoSdkInitialization> => {\n  if (!isTraceInitialized) {\n    isTraceInitialized = true;\n    try {\n      if (process.env.LUMIGO_SWITCH_OFF?.toLowerCase() === 'true') {\n        logger.info(\n          'The Lumigo OpenTelemetry Distro is switched off (the \"LUMIGO_SWITCH_OFF\" environment variable is set): no telemetry will be sent to Lumigo.'\n        );\n        return;\n      }\n\n      const instrumentationsToInstall = [\n        new LumigoHttpInstrumentation(new URL(lumigoEndpoint).hostname),\n        new LumigoExpressInstrumentation(),\n        new LumigoMongoDBInstrumentation(),\n      ].filter((i) => i.isApplicable());\n\n      /*\n       * Register instrumentation globally, so that all tracer providers\n       * will receive traces. This may be necessary when there is already\n       * built-in instrumentation in the app.\n       */\n      registerInstrumentations({\n        instrumentations: instrumentationsToInstall.map(\n          (i) => i.getInstrumentation() as InstrumentationOption\n        ),\n      });\n\n      const instrumentedModules = instrumentationsToInstall.map((i) => i.getInstrumentedModule());\n\n      logger.debug(`Instrumented modules: ${instrumentedModules.join(', ')}`);\n\n      const lumigoToken = process.env.LUMIGO_TRACER_TOKEN;\n\n      if (!lumigoToken) {\n        logger.warn(\n          'The Lumigo token is not available (the \"LUMIGO_TRACER_TOKEN\" environment variable is not set): no telemetry will be sent to Lumigo.'\n        );\n      }\n\n      const lumigoReportDependencies =\n        process.env.LUMIGO_REPORT_DEPENDENCIES?.toLowerCase() !== 'false';\n\n      const detectedResource = Resource.default().merge(\n        await detectResources({\n          detectors: [\n            envDetector,\n            processDetector,\n            awsResourceDetectors.awsEcsDetector,\n            new LumigoDistroDetector(),\n            new LumigoKubernetesDetector(),\n          ],\n        })\n      );\n\n      const framework = instrumentedModules.includes('express') ? 'express' : 'node';\n\n      const tracerProvider = new NodeTracerProvider({\n        resource: detectedResource.merge(\n          new Resource({\n            framework,\n            'process.environ': CommonUtils.payloadStringify(extractEnvVars(), 20_000),\n          })\n        ),\n        spanLimits: {\n          attributeValueLengthLimit: getMaxSize(),\n        },\n      });\n\n      tracerProvider.register({\n        propagator: new LumigoW3CTraceContextPropagator(),\n      });\n\n      if (process.env.LUMIGO_DEBUG_SPANDUMP) {\n        tracerProvider.addSpanProcessor(\n          new SimpleSpanProcessor(new FileSpanExporter(process.env.LUMIGO_DEBUG_SPANDUMP))\n        );\n      }\n\n      let reportDependencies: Promise<void | Object>;\n      if (lumigoToken) {\n        const otlpExporter = new OTLPTraceExporter({\n          url: lumigoEndpoint,\n          headers: {\n            Authorization: `LumigoToken ${lumigoToken.trim()}`,\n          },\n        });\n\n        tracerProvider.addSpanProcessor(\n          new BatchSpanProcessor(otlpExporter, {\n            // The maximum queue size. After the size is reached spans are dropped.\n            maxQueueSize: 1000,\n            // The maximum batch size of every export. It must be smaller or equal to maxQueueSize.\n            maxExportBatchSize: 100,\n          })\n        );\n\n        /*\n         * We do not wait for this promise, we do not want to delay the application.\n         * Dependency reporting is done \"best effort\".\n         */\n        if (!lumigoReportDependencies) {\n          reportDependencies = Promise.resolve('Dependency reporting is turned off');\n        } else if (lumigoEndpoint === DEFAULT_LUMIGO_ENDPOINT) {\n          /*\n           * If the trace endpoint is different than the default, it could be\n           * that this application does not have egress to Lumigo SaaS or it is\n           * reporting to a backend that is not Lumigo, and thus does not have\n           * the facilities to process the dependencies anyways. In this case,\n           * skip the reporting, as it might not work and cause noise in the logs.\n           *\n           * We pass `detectedResource` as opposed to `tracerProvider.resource`\n           * because we want only the infrastructure-related resource attributes\n           * like ARNs, and specifically we do not need the process environment.\n           */\n          reportDependencies = report(\n            DEFAULT_DEPENDENCIES_ENDPOINT,\n            lumigoToken,\n            detectedResource.attributes\n          );\n        }\n      } else {\n        reportDependencies = Promise.resolve('No Lumigo token available');\n      }\n\n      tracerProvider.register();\n\n      const distroVersion =\n        detectedResource && detectedResource.attributes\n          ? detectedResource.attributes[LUMIGO_DISTRO_VERSION]\n          : 'unknown';\n\n      logger.info(`Lumigo tracer v${distroVersion} started.`);\n\n      return Promise.resolve({\n        tracerProvider,\n        reportDependencies,\n        instrumentedModules,\n      });\n    } catch (err) {\n      reportInitError(err);\n      return Promise.reject(err);\n    }\n  } else {\n    logger.debug(\n      'The Lumigo OpenTelemetry Distro is already initialized: additional attempt to initialize has been ignored.'\n    );\n  }\n};\n\nexport const init = trace();\n"]}