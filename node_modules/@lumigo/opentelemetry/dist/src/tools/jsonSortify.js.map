{"version":3,"file":"jsonSortify.js","sourceRoot":"","sources":["../../../src/tools/jsonSortify.ts"],"names":[],"mappings":";AAAA,8EAA8E;AAC9E,+BAA+B;;;AAE/B,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,EAAE;IACrB,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACpB,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACxB;IACD,IAAI,CAAC,YAAY,MAAM,EAAE;QACvB,yBAAyB;QACzB,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC7B,IAAI,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACjC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;aACpB;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;QACH,uBAAuB;QACvB,OAAO,OAAO;aACX,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;aACrB,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;aACzB,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACtB,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW;YAC3C,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;KACV;IACD,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,yEAAyE;AAEnH,MAAM,OAAO,GAAG,CAAC,KAAK,EAAE,QAAS,EAAE,KAAM,EAAE,EAAE;IAClD,iGAAiG;IACjG,qEAAqE;IACrE,iFAAiF;IACjF,IAAI,UAAU,GAAG,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IACnD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;QACnE,qCAAqC;QACrC,OAAO,UAAU,CAAC;KACnB;IACD,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtC,OAAO,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AACxD,CAAC,CAAC;AAXW,QAAA,OAAO,WAWlB","sourcesContent":["//Copied from https://github.com/ThomasR/JSON.sortify/blob/master/src/index.js\n//Because its not TS compatible\n\nconst sortKeys = (o) => {\n  if (Array.isArray(o)) {\n    return o.map(sortKeys);\n  }\n  if (o instanceof Object) {\n    // put numeric keys first\n    let numeric = [];\n    let nonNumeric = [];\n    Object.keys(o).forEach((key) => {\n      if (/^(0|[1-9][0-9]*)$/.test(key)) {\n        numeric.push(+key);\n      } else {\n        nonNumeric.push(key);\n      }\n    });\n    // do the rearrangement\n    return numeric\n      .sort((a, b) => a - b)\n      .concat(nonNumeric.sort())\n      .reduce((result, key) => {\n        result[key] = sortKeys(o[key]); // recurse!\n        return result;\n      }, {});\n  }\n  return o;\n};\n\nconst jsonStringify = JSON.stringify.bind(JSON); // this allows redefinition like JSON.stringify = require('json.sortify')\n\nexport const sortify = (value, replacer?, space?) => {\n  // replacer, toJSON(), cyclic references and other stuff is better handled by native stringifier.\n  // So we do JSON.stringify(sortKeys( JSON.parse(JSON.stringify()) )).\n  // This approach is slightly slower but much safer than a manual stringification.\n  let nativeJson = jsonStringify(value, replacer, 0);\n  if (!nativeJson || (nativeJson[0] !== '{' && nativeJson[0] !== '[')) {\n    // if value is not an Object or Array\n    return nativeJson;\n  }\n  let cleanObj = JSON.parse(nativeJson);\n  return jsonStringify(sortKeys(cleanObj), null, space);\n};\n"]}