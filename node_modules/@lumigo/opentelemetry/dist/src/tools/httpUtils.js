"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractBodyFromWriteOrEndFunc = exports.extractBodyFromEmitSocketEvent = exports.isValidHttpRequestBody = void 0;
const utils_1 = require("../utils");
const isValidHttpRequestBody = (reqBody) => !!(reqBody && (typeof reqBody === 'string' || reqBody instanceof Buffer));
exports.isValidHttpRequestBody = isValidHttpRequestBody;
const extractBodyFromEmitSocketEvent = (socketEventArgs) => {
    return (0, utils_1.safeExecute)(() => {
        var _a, _b, _c, _d, _e;
        if (socketEventArgs && socketEventArgs._httpMessage && socketEventArgs._httpMessage._hasBody) {
            const httpMessage = socketEventArgs._httpMessage;
            let lines = [];
            if (httpMessage.hasOwnProperty('outputData')) {
                lines = (_c = (_b = (_a = httpMessage.outputData) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.split('\n');
            }
            else if (httpMessage.hasOwnProperty('output')) {
                lines = (_e = (_d = httpMessage.output) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.split('\n');
            }
            if (lines.length > 0) {
                return lines[lines.length - 1];
            }
        }
    })();
};
exports.extractBodyFromEmitSocketEvent = extractBodyFromEmitSocketEvent;
const extractBodyFromWriteOrEndFunc = (writeEventArgs) => {
    return (0, utils_1.safeExecute)(() => {
        if ((0, exports.isValidHttpRequestBody)(writeEventArgs[0])) {
            const encoding = (0, utils_1.isEncodingType)(writeEventArgs[1]) ? writeEventArgs[1] : 'utf8';
            return typeof writeEventArgs[0] === 'string'
                ? Buffer(writeEventArgs[0]).toString(encoding)
                : writeEventArgs[0].toString();
        }
    })();
};
exports.extractBodyFromWriteOrEndFunc = extractBodyFromWriteOrEndFunc;
//# sourceMappingURL=httpUtils.js.map