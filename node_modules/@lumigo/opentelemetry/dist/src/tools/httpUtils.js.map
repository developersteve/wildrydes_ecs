{"version":3,"file":"httpUtils.js","sourceRoot":"","sources":["../../../src/tools/httpUtils.js"],"names":[],"mappings":";;;AAAA,oCAAuD;AAEhD,MAAM,sBAAsB,GAAG,CAAC,OAAO,EAAE,EAAE,CAChD,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,YAAY,MAAM,CAAC,CAAC,CAAC;AAD/D,QAAA,sBAAsB,0BACyC;AAErE,MAAM,8BAA8B,GAAG,CAAC,eAAe,EAAE,EAAE;IAChE,OAAO,IAAA,mBAAW,EAAC,GAAG,EAAE;;QACtB,IAAI,eAAe,IAAI,eAAe,CAAC,YAAY,IAAI,eAAe,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC5F,MAAM,WAAW,GAAG,eAAe,CAAC,YAAY,CAAC;YACjD,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,IAAI,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;gBAC5C,KAAK,GAAG,MAAA,MAAA,MAAA,WAAW,CAAC,UAAU,0CAAG,CAAC,CAAC,0CAAE,IAAI,0CAAE,KAAK,CAAC,IAAI,CAAC,CAAC;aACxD;iBAAM,IAAI,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC/C,KAAK,GAAG,MAAA,MAAA,WAAW,CAAC,MAAM,0CAAG,CAAC,CAAC,0CAAE,KAAK,CAAC,IAAI,CAAC,CAAC;aAC9C;YACD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAChC;SACF;IACH,CAAC,CAAC,EAAE,CAAC;AACP,CAAC,CAAC;AAfW,QAAA,8BAA8B,kCAezC;AAEK,MAAM,6BAA6B,GAAG,CAAC,cAAc,EAAE,EAAE;IAC9D,OAAO,IAAA,mBAAW,EAAC,GAAG,EAAE;QACtB,IAAI,IAAA,8BAAsB,EAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;YAC7C,MAAM,QAAQ,GAAG,IAAA,sBAAc,EAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAChF,OAAO,OAAO,cAAc,CAAC,CAAC,CAAC,KAAK,QAAQ;gBAC1C,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC9C,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;SAClC;IACH,CAAC,CAAC,EAAE,CAAC;AACP,CAAC,CAAC;AATW,QAAA,6BAA6B,iCASxC","sourcesContent":["import { isEncodingType, safeExecute } from '../utils';\n\nexport const isValidHttpRequestBody = (reqBody) =>\n  !!(reqBody && (typeof reqBody === 'string' || reqBody instanceof Buffer));\n\nexport const extractBodyFromEmitSocketEvent = (socketEventArgs) => {\n  return safeExecute(() => {\n    if (socketEventArgs && socketEventArgs._httpMessage && socketEventArgs._httpMessage._hasBody) {\n      const httpMessage = socketEventArgs._httpMessage;\n      let lines = [];\n      if (httpMessage.hasOwnProperty('outputData')) {\n        lines = httpMessage.outputData?.[0]?.data?.split('\\n');\n      } else if (httpMessage.hasOwnProperty('output')) {\n        lines = httpMessage.output?.[0]?.split('\\n');\n      }\n      if (lines.length > 0) {\n        return lines[lines.length - 1];\n      }\n    }\n  })();\n};\n\nexport const extractBodyFromWriteOrEndFunc = (writeEventArgs) => {\n  return safeExecute(() => {\n    if (isValidHttpRequestBody(writeEventArgs[0])) {\n      const encoding = isEncodingType(writeEventArgs[1]) ? writeEventArgs[1] : 'utf8';\n      return typeof writeEventArgs[0] === 'string'\n        ? Buffer(writeEventArgs[0]).toString(encoding)\n        : writeEventArgs[0].toString();\n    }\n  })();\n};\n"]}