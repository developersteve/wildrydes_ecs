"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMaxSize = exports.safeRequire = exports.canRequireModule = exports.removeDuplicates = exports.md5Hash = exports.parseQueryParams = exports.isAwsService = exports.safeGet = exports.getUri = exports.postUri = exports.extractEnvVars = exports.getProtocolModuleForUri = exports.getConnectionTimeout = exports.runOneTimeWrapper = exports.isEncodingType = exports.safeExecute = exports.DEFAULT_CONNECTION_TIMEOUT = void 0;
const crypto = __importStar(require("crypto"));
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const logging_1 = require("./logging");
const jsonSortify_1 = require("./tools/jsonSortify");
const DEFAULT_MAX_ENTRY_SIZE = 2048;
exports.DEFAULT_CONNECTION_TIMEOUT = 5000;
function safeExecute(callback, message = 'Error in Lumigo tracer', defaultReturn = undefined) {
    return function (...args) {
        try {
            return callback.apply(this, args);
        }
        catch (err) {
            logging_1.logger.debug(message, err);
            return defaultReturn;
        }
    };
}
exports.safeExecute = safeExecute;
const isEncodingType = (encodingType) => !!(encodingType &&
    typeof encodingType === 'string' &&
    ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'binary', 'hex'].includes(encodingType));
exports.isEncodingType = isEncodingType;
const runOneTimeWrapper = (func, context = undefined) => {
    let done = false;
    return (...args) => {
        if (!done) {
            const result = func.apply(context || this, args);
            done = true;
            return result;
        }
    };
};
exports.runOneTimeWrapper = runOneTimeWrapper;
const getConnectionTimeout = () => {
    return parseInt(process.env['LUMIGO_CONNECTION_TIMEOUT']) || exports.DEFAULT_CONNECTION_TIMEOUT;
};
exports.getConnectionTimeout = getConnectionTimeout;
const getProtocolModuleForUri = (uri) => {
    return uri.indexOf('https') === 0 ? https : http;
};
exports.getProtocolModuleForUri = getProtocolModuleForUri;
/**
 * This function return the environment variables by total max size of the values of each environment variable key.
 * For example: if max size=2, environment variables ={"key_1": "value1", "key_2": "value_2"}, return {"key_1": "value1"}.
 */
const extractEnvVars = () => {
    const res = {};
    const maxSize = (0, exports.getMaxSize)();
    let length = 0;
    Object.entries(process.env).forEach(([key, value]) => {
        if (length + value.length <= maxSize) {
            res[key] = value;
            length += value.length;
        }
    });
    return res;
};
exports.extractEnvVars = extractEnvVars;
const postUri = (url, data, headers = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const jsonData = JSON.stringify(data);
    headers['Content-Type'] = 'application/x-www-form-urlencoded';
    headers['Content-Length'] = String(jsonData.length);
    const parsedUrl = new URL(url);
    const responseBody = yield new Promise((resolve, reject) => {
        const request = (0, exports.getProtocolModuleForUri)(url).request({
            method: 'POST',
            protocol: parsedUrl.protocol,
            hostname: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.pathname,
            headers,
        }, (response) => {
            if (response.statusCode >= 400) {
                reject(`Request to '${url}' failed with status ${response.statusCode}`);
            }
            let responseBody = '';
            response.on('data', (chunk) => (responseBody += chunk.toString()));
            // All the data has been read, resolve the Promise
            response.on('end', () => resolve(responseBody));
        });
        // Set an aggressive timeout to prevent lock-ups
        request.setTimeout((0, exports.getConnectionTimeout)(), () => {
            request.destroy();
        });
        // Connection error, disconnection, etc.
        request.on('error', reject);
        request.write(jsonData);
        request.end();
    });
    return JSON.parse(responseBody.toString());
});
exports.postUri = postUri;
const getUri = (uri) => __awaiter(void 0, void 0, void 0, function* () {
    const responseBody = yield new Promise((resolve, reject) => {
        const request = (0, exports.getProtocolModuleForUri)(uri).get(uri, (response) => {
            if (response.statusCode >= 400) {
                reject(`Request to '${uri}' failed with status ${response.statusCode}`);
            }
            /*
             * Concatenate the response out of chunks:
             * https://nodejs.org/api/stream.html#stream_event_data
             */
            let responseBody = '';
            response.on('data', (chunk) => (responseBody += chunk.toString()));
            // All the data has been read, resolve the Promise
            response.on('end', () => resolve(responseBody));
        });
        // Set an aggressive timeout to prevent lock-ups
        request.setTimeout((0, exports.getConnectionTimeout)(), () => {
            request.destroy();
        });
        // Connection error, disconnection, etc.
        request.on('error', reject);
        request.end();
    });
    return JSON.parse(responseBody.toString());
});
exports.getUri = getUri;
const safeGet = (obj, arr, dflt = null) => {
    let current = obj;
    for (const i in arr) {
        if (!current) {
            return dflt;
        }
        current = current[arr[i]];
    }
    return current || dflt;
};
exports.safeGet = safeGet;
const isAwsService = (host, responseData = undefined) => {
    if (host && host.includes('amazonaws.com')) {
        return true;
    }
    return !!(responseData &&
        responseData.headers &&
        (responseData.headers['x-amzn-requestid'] || responseData.headers['x-amz-request-id']));
};
exports.isAwsService = isAwsService;
const parseQueryParams = (queryParams) => {
    return safeExecute(() => {
        if (typeof queryParams !== 'string')
            return {};
        const obj = {};
        queryParams.replace(/([^=&]+)=([^&]*)/g, 
        // @ts-ignore
        safeExecute((m, key, value) => {
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }, 'Failed to parse a specific key in parseQueryParams'));
        return obj;
    }, 'Failed to parse query params')();
};
exports.parseQueryParams = parseQueryParams;
const md5Hash = (item) => {
    try {
        const md5sum = crypto.createHash('md5');
        md5sum.update((0, jsonSortify_1.sortify)(item));
        return md5sum.digest('hex');
    }
    catch (err) {
        logging_1.logger.debug('Failed to hash item', err);
        return undefined;
    }
};
exports.md5Hash = md5Hash;
// @ts-ignore
const removeDuplicates = (arr) => Array.from(new Set(arr));
exports.removeDuplicates = removeDuplicates;
const canRequireModule = (libId) => {
    const customReq = 
    // eslint-disable-next-line no-undef,camelcase
    // @ts-ignore __non_webpack_require__ not available at compile time
    typeof __non_webpack_require__ !== 'undefined' ? __non_webpack_require__ : require;
    try {
        return !!customReq.resolve(libId);
    }
    catch (e) {
        try {
            return !!customReq.resolve(libId, {
                paths: (process.env.NODE_PATH || '').split(':'),
            });
        }
        catch (e) {
            if (e.code !== 'MODULE_NOT_FOUND') {
                logging_1.logger.warn('Unable to resolve module', {
                    error: e,
                    libId: libId,
                });
            }
        }
    }
    return false;
};
exports.canRequireModule = canRequireModule;
const safeRequire = (libId) => {
    const customReq = 
    // eslint-disable-next-line no-undef,camelcase
    // @ts-ignore __non_webpack_require__ not available at compile time
    typeof __non_webpack_require__ !== 'undefined' ? __non_webpack_require__ : require;
    try {
        return customReq(libId);
    }
    catch (e) {
        try {
            const path = customReq.resolve(libId, {
                paths: (process.env.NODE_PATH || '').split(':'),
            });
            return customReq(path);
        }
        catch (e) {
            if (e.code !== 'MODULE_NOT_FOUND') {
                logging_1.logger.warn('Unable to load module', {
                    error: e,
                    libId: libId,
                });
            }
        }
    }
    return undefined;
};
exports.safeRequire = safeRequire;
const getMaxSize = () => {
    return (parseInt(process.env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) ||
        parseInt(process.env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) ||
        DEFAULT_MAX_ENTRY_SIZE);
};
exports.getMaxSize = getMaxSize;
//# sourceMappingURL=utils.js.map