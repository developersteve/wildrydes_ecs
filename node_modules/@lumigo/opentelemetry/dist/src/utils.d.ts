/// <reference types="node" />
/// <reference types="node" />
import * as http from 'http';
import * as https from 'https';
export declare const DEFAULT_CONNECTION_TIMEOUT = 5000;
interface HttpHeaders {
    [key: string]: string;
}
export declare function safeExecute<T>(callback: Function, message?: string, defaultReturn?: T): Function;
export declare const isEncodingType: (encodingType: any) => boolean;
export declare const runOneTimeWrapper: (func: Function, context?: any) => Function;
export declare const getConnectionTimeout: () => number;
export declare const getProtocolModuleForUri: (uri: string) => typeof http | typeof https;
/**
 * This function return the environment variables by total max size of the values of each environment variable key.
 * For example: if max size=2, environment variables ={"key_1": "value1", "key_2": "value_2"}, return {"key_1": "value1"}.
 */
export declare const extractEnvVars: () => {};
export declare const postUri: (url: string, data: Object, headers?: HttpHeaders) => Promise<Object>;
export declare const getUri: (uri: string) => Promise<Object>;
export declare const safeGet: (obj: any, arr: any, dflt?: any) => any;
export declare const isAwsService: (host: any, responseData?: any) => boolean;
export declare const parseQueryParams: (queryParams: any) => any;
export declare const md5Hash: (item: {}) => string | undefined;
export declare const removeDuplicates: (arr: any) => unknown[];
export declare const canRequireModule: (libId: any) => boolean;
export declare const safeRequire: (libId: any) => any;
export declare const getMaxSize: () => number;
export {};
//# sourceMappingURL=utils.d.ts.map