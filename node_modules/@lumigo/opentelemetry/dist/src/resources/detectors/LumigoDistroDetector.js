"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LumigoDistroDetector = exports.LUMIGO_DISTRO_VERSION = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const logging_1 = require("../../logging");
const resources_1 = require("@opentelemetry/resources");
exports.LUMIGO_DISTRO_VERSION = 'lumigo.distro.version';
/**
 * LumigoDistroDetector provides resource attributes documeting which version of the
 * Lumigo Distro for OpenTelemetry is used.
 */
class LumigoDistroDetector {
    detect(_config) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                let distroVersion = 'unknown';
                try {
                    // eslint-disable-next-line @typescript-eslint/no-var-requires
                    const { version } = require('../../../package.json');
                    distroVersion = version;
                }
                catch (e) {
                    logging_1.logger.debug('Cannot look up Lumigo distro version');
                }
                resolve(new resources_1.Resource({
                    [exports.LUMIGO_DISTRO_VERSION]: distroVersion,
                }));
            });
        });
    }
}
exports.LumigoDistroDetector = LumigoDistroDetector;
//# sourceMappingURL=LumigoDistroDetector.js.map