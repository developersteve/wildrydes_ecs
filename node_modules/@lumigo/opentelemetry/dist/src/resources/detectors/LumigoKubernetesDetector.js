"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LumigoKubernetesDetector = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const promises_1 = require("fs/promises");
const logging_1 = require("../../logging");
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const POD_ID_LENGTH = 36;
const CONTAINER_ID_LENGTH = 64;
/*
 * Detector for the Kubernetes Pod UUID, based on https://github.com/open-telemetry/opentelemetry-python-contrib/pull/1489
 */
class LumigoKubernetesDetector {
    detect(_config) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const hostFileContent = yield (0, promises_1.readFile)('/etc/hosts', {
                    flag: 'r',
                    encoding: 'utf8',
                });
                const hostFileFirstLine = String(hostFileContent).slice(0, hostFileContent.indexOf('\n'));
                if (!hostFileFirstLine.startsWith('# Kubernetes-managed hosts file')) {
                    throw new Error('File /etc/hosts does not seem managed by Kubernetes');
                }
            }
            catch (ex) {
                logging_1.logger.debug('LumigoKubernetesDetector does not think this process runs in a Kubernetes pod', ex);
                return resources_1.Resource.EMPTY;
            }
            let podId;
            try {
                podId = yield get_kubenertes_pod_uid_v1();
            }
            catch (err) {
                try {
                    logging_1.logger.debug(`No Pod UID v1 found: ${err}`);
                    podId = yield get_kubenertes_pod_uid_v2();
                }
                catch (err) {
                    logging_1.logger.debug(`No Pod UID v2 found: ${err}`);
                }
            }
            if (!podId) {
                return resources_1.Resource.EMPTY;
            }
            return new resources_1.Resource({
                [semantic_conventions_1.SemanticResourceAttributes.K8S_POD_UID]: podId,
            });
        });
    }
}
exports.LumigoKubernetesDetector = LumigoKubernetesDetector;
const get_kubenertes_pod_uid_v1 = () => __awaiter(void 0, void 0, void 0, function* () {
    const mountinfo = yield (0, promises_1.readFile)('/proc/self/mountinfo', {
        flag: 'r',
        encoding: 'utf8',
    });
    const podMountInfoEntry = mountinfo
        .split('\n')
        .map((line) => line.trim())
        .filter((line) => !!line)
        .filter((line) => line.length > POD_ID_LENGTH)
        .find((line) => line.indexOf('/pods/') > 0);
    if (!podMountInfoEntry) {
        return Promise.reject(new Error("No pod-like mountpoint found in '/proc/self/mountinfo'"));
    }
    return podMountInfoEntry.split('/pods/')[1].substring(0, POD_ID_LENGTH);
});
const get_kubenertes_pod_uid_v2 = () => __awaiter(void 0, void 0, void 0, function* () {
    const cgroups = yield (0, promises_1.readFile)('/proc/self/cgroup', {
        flag: 'r',
        encoding: 'utf8',
    });
    return cgroups
        .split('\n')
        .map((line) => line.trim())
        .filter((line) => !!line)
        .filter((line) => line.length > CONTAINER_ID_LENGTH)
        .map((line) => {
        const segments = line.split('/');
        if (segments.length > 2 &&
            segments[segments.length - 2].startsWith('pod') &&
            segments[segments.length - 2].length === POD_ID_LENGTH + 3) {
            return segments[segments.length - 2].substring(3, POD_ID_LENGTH + 3);
        }
        return segments[segments.length - 2];
    })
        .find((podId) => !!podId);
});
//# sourceMappingURL=LumigoKubernetesDetector.js.map