"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const instrumentation_1 = require("@opentelemetry/instrumentation");
const api_1 = require("@opentelemetry/api");
const logging_1 = require("../logging");
class LogsInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor() {
        super('logs-instrumentation', '0.0.1');
        this.logsWrapper = (instrumentation, level) => {
            return (original) => {
                return (
                // eslint-disable-next-line node/no-unsupported-features/node-builtins
                message, options) => {
                    let result;
                    let stringifyOptions;
                    try {
                        stringifyOptions = JSON.stringify(options);
                    }
                    catch (e) { }
                    instrumentation.tracer.startActiveSpan('logs-span', {
                        kind: api_1.SpanKind.INTERNAL,
                        attributes: { log: message, level, options: stringifyOptions },
                    }, (span) => {
                        span.end();
                        return span;
                    });
                    result = options
                        ? original.apply(this, [message, options])
                        : original.apply(this, [message]);
                    return result;
                };
            };
        };
    }
    init() {
        logging_1.logger.debug('in console instrumentation');
        return [
            new instrumentation_1.InstrumentationNodeModuleDefinition('console', ['*'], (moduleExports, moduleVersion) => {
                const instrumentation = this;
                this._wrap(moduleExports, 'warn', this.logsWrapper(instrumentation, 'warn'));
                this._wrap(moduleExports, 'error', this.logsWrapper(instrumentation, 'error'));
                return moduleExports;
            }, (exports) => { }, []),
        ];
    }
}
exports.default = LogsInstrumentation;
//# sourceMappingURL=logsInstrumentation.js.map