"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressHooks = void 0;
const utils_1 = require("../../utils");
const node_core_1 = require("@lumigo/node-core");
exports.ExpressHooks = {
    requestHook(span, { req, res }) {
        const oldResEnd = res.end;
        const oldResSend = res.send;
        if (req.query)
            span.setAttribute('http.request.query', node_core_1.CommonUtils.payloadStringify(req.query));
        if (req.headers)
            span.setAttribute('http.request.headers', node_core_1.CommonUtils.payloadStringify(req.headers));
        let response;
        res.send = function (data) {
            response = data;
            res.send = oldResSend;
            // eslint-disable-next-line prefer-rest-params
            return oldResSend.apply(res, arguments);
        };
        res.end = function () {
            return (0, utils_1.safeExecute)(() => {
                // eslint-disable-next-line prefer-rest-params
                const origRes = oldResEnd.apply(res, arguments);
                if (res.getHeaders())
                    span.setAttribute('http.response.headers', node_core_1.CommonUtils.payloadStringify(res.getHeaders())); // TODO This is not compliant with the HTTP semantic conventions
                if (response)
                    span.setAttribute('http.response.body', node_core_1.CommonUtils.payloadStringify(response));
                if (req.body)
                    span.setAttribute('http.request.body', node_core_1.CommonUtils.payloadStringify(req.body));
                res.end = oldResEnd;
                return origRes;
            })();
        };
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    responseHook(span, response) { },
};
//# sourceMappingURL=express.js.map