{"version":3,"file":"express.js","sourceRoot":"","sources":["../../../../src/instrumentations/express/express.ts"],"names":[],"mappings":";;;AAIA,uCAA0C;AAE1C,iDAAgD;AAInC,QAAA,YAAY,GAAgD;IACvE,WAAW,CAAC,IAAU,EAAE,EAAE,GAAG,EAAE,GAAG,EAAsB;QACtD,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC;QAC1B,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC;QAC5B,IAAI,GAAG,CAAC,KAAK;YAAE,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,uBAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAChG,IAAI,GAAG,CAAC,OAAO;YACb,IAAI,CAAC,YAAY,CAAC,sBAAsB,EAAE,uBAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACvF,IAAI,QAAQ,CAAC;QACb,GAAG,CAAC,IAAI,GAAG,UAAU,IAAS;YAC5B,QAAQ,GAAG,IAAI,CAAC;YAChB,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC;YACtB,8CAA8C;YAC9C,OAAO,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAC1C,CAAC,CAAC;QACF,GAAG,CAAC,GAAG,GAAG;YACR,OAAO,IAAA,mBAAW,EAAC,GAAG,EAAE;gBACtB,8CAA8C;gBAC9C,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;gBAChD,IAAI,GAAG,CAAC,UAAU,EAAE;oBAClB,IAAI,CAAC,YAAY,CACf,uBAAuB,EACvB,uBAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAC/C,CAAC,CAAC,gEAAgE;gBACrE,IAAI,QAAQ;oBACV,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,uBAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClF,IAAI,GAAG,CAAC,IAAI;oBACV,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,uBAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjF,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC;gBACpB,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,EAAE,CAAC;QACP,CAAC,CAAC;IACJ,CAAC;IACD,mGAAmG;IACnG,YAAY,CAAC,IAAU,EAAE,QAAa,IAAS,CAAC;CACjD,CAAC","sourcesContent":["import type express from 'express';\n\nimport { Span } from '@opentelemetry/api';\n\nimport { safeExecute } from '../../utils';\nimport { InstrumentationIfc } from '../hooksIfc';\nimport { CommonUtils } from '@lumigo/node-core';\n\ntype ExpressRequestType = { req: express.Request; res: express.Response };\n\nexport const ExpressHooks: InstrumentationIfc<ExpressRequestType, any> = {\n  requestHook(span: Span, { req, res }: ExpressRequestType): void {\n    const oldResEnd = res.end;\n    const oldResSend = res.send;\n    if (req.query) span.setAttribute('http.request.query', CommonUtils.payloadStringify(req.query));\n    if (req.headers)\n      span.setAttribute('http.request.headers', CommonUtils.payloadStringify(req.headers));\n    let response;\n    res.send = function (data: any) {\n      response = data;\n      res.send = oldResSend;\n      // eslint-disable-next-line prefer-rest-params\n      return oldResSend.apply(res, arguments);\n    };\n    res.end = function () {\n      return safeExecute(() => {\n        // eslint-disable-next-line prefer-rest-params\n        const origRes = oldResEnd.apply(res, arguments);\n        if (res.getHeaders())\n          span.setAttribute(\n            'http.response.headers',\n            CommonUtils.payloadStringify(res.getHeaders())\n          ); // TODO This is not compliant with the HTTP semantic conventions\n        if (response)\n          span.setAttribute('http.response.body', CommonUtils.payloadStringify(response));\n        if (req.body)\n          span.setAttribute('http.request.body', CommonUtils.payloadStringify(req.body));\n        res.end = oldResEnd;\n        return origRes;\n      })();\n    };\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\n  responseHook(span: Span, response: any): void {},\n};\n"]}