/// <reference types="node" />
import { ClientRequest, IncomingMessage, ServerResponse } from 'http';
import { RequestRawData } from '@lumigo/node-core/lib/types/spans/httpSpan';
import { Span } from '@opentelemetry/api';
import { InstrumentationIfc } from '../hooksIfc';
export declare type HookOptions = {
    beforeHook?: Function;
    afterHook?: Function;
};
declare type OnRequestEndOptionsType = {
    body: string;
    headers: Record<string, string>;
    statusCode: number;
    truncated: boolean;
};
export declare const isValidHttpRequestBody: (reqBody: any) => boolean;
export declare const isEncodingType: (encodingType: any) => boolean;
export declare const isEmptyString: (str: any) => boolean;
declare type RequestType = (ClientRequest | IncomingMessage) & {
    headers?: any;
    getHeaders: () => any;
};
export declare const HttpHooks: InstrumentationIfc<ClientRequest | IncomingMessage, IncomingMessage | ServerResponse>;
export declare class Http {
    static onRequestEnd(span: Span & {
        attributes: Record<string, string>;
    }): (requestRawData: RequestRawData, options: OnRequestEndOptionsType) => void;
    static extractBodyFromEmitSocketEvent(socketEventArgs: any): any;
    static getRequestHeaders(request: RequestType): any;
    static extractBodyFromWriteOrEndFunc: (writeEventArgs: any) => any;
    static httpRequestArguments(args: any): {
        url: any;
        options: any;
        callback: any;
    };
    static getHostFromOptionsOrUrl(options: any, url: any): any;
    static httpRequestWriteBeforeHookWrapper(requestData: RequestRawData, span: Span): (args: any) => void;
    static createEmitResponseOnEmitBeforeHookHandler(requestRawData: RequestRawData, response: any, onRequestEnd: (requestRawData: RequestRawData, options: OnRequestEndOptionsType) => void): (args: any) => void;
    static createEmitResponseHandler(requestData: RequestRawData, span: Span & {
        attributes: Record<string, string>;
    }): (response: any) => void;
    static httpRequestEmitBeforeHookWrapper(requestData: RequestRawData, span: Span & {
        attributes: Record<string, string>;
    }): (args: any) => void;
}
export {};
//# sourceMappingURL=http.d.ts.map