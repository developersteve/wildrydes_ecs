{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../../src/instrumentations/https/http.ts"],"names":[],"mappings":"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","sourcesContent":["import { ClientRequest, IncomingMessage, ServerResponse } from 'http';\nimport * as shimmer from 'shimmer';\nimport { URL } from 'url';\n\nimport { CommonUtils } from '@lumigo/node-core';\nimport { RequestRawData } from '@lumigo/node-core/lib/types/spans/httpSpan';\nimport { Span } from '@opentelemetry/api';\n\nimport { logger } from '../../logging';\nimport { getAwsServiceData } from '../../spans/awsSpan';\nimport { isAwsService, runOneTimeWrapper, safeExecute, getMaxSize } from '../../utils';\nimport { InstrumentationIfc } from '../hooksIfc';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\n\nconst isFunctionAlreadyWrapped = (fn) => fn && fn.__wrapped;\n\nexport type HookOptions = {\n  beforeHook?: Function;\n  afterHook?: Function;\n};\n\nconst hook = (module, funcName, options: HookOptions = {}, shimmerLib = shimmer) => {\n  const { beforeHook = noop, afterHook = noop } = options;\n  const safeBeforeHook = safeExecute(beforeHook, `before hook of ${funcName} fail`);\n  const safeAfterHook = safeExecute(afterHook, `after hook of ${funcName} fail`);\n  const extenderContext = {};\n  try {\n    const wrapper = (originalFn) => {\n      if (isFunctionAlreadyWrapped(originalFn)) return originalFn;\n      return function (...args) {\n        safeBeforeHook.call(this, args, extenderContext);\n        const originalFnResult = originalFn.apply(this, args);\n        safeAfterHook.call(this, args, originalFnResult, extenderContext);\n        return originalFnResult;\n      };\n    };\n    shimmerLib.wrap(module, funcName, wrapper);\n  } catch (e) {\n    logger.warn(`Wrapping of function ${funcName} failed`, options);\n  }\n};\n\ntype OnRequestEndOptionsType = {\n  body: string;\n  headers: Record<string, string>;\n  statusCode: number;\n  truncated: boolean;\n};\n\nexport const isValidHttpRequestBody = (reqBody) =>\n  !!(reqBody && (typeof reqBody === 'string' || reqBody instanceof Buffer));\n\nexport const isEncodingType = (encodingType): boolean =>\n  !!(\n    encodingType &&\n    typeof encodingType === 'string' &&\n    ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'binary', 'hex'].includes(encodingType)\n  );\n\nexport const isEmptyString = (str): boolean =>\n  !!(!str || (typeof str === 'string' && str.length === 0));\n\ntype RequestType = (ClientRequest | IncomingMessage) & { headers?: any; getHeaders: () => any };\n\nexport const HttpHooks: InstrumentationIfc<\n  ClientRequest | IncomingMessage,\n  IncomingMessage | ServerResponse\n> = {\n  requestHook(span: Span & { attributes: Record<string, string> }, request: RequestType) {\n    if (request instanceof ClientRequest) {\n      safeExecute(() => {\n        const requestData: RequestRawData = {\n          request: {\n            path: span.attributes?.['http.target'],\n            host: span.attributes?.['http.host'] || span.attributes?.['net.peer.name'],\n            truncated: false,\n            body: '',\n            headers: Http.getRequestHeaders(request),\n          },\n          response: {\n            truncated: false,\n            body: '',\n            headers: {},\n          },\n        };\n        const scrubbedHeaders = CommonUtils.payloadStringify(requestData.request.headers);\n        span.setAttribute('http.request.headers', scrubbedHeaders);\n        const emitWrapper = Http.httpRequestEmitBeforeHookWrapper(requestData, span);\n\n        const writeWrapper = Http.httpRequestWriteBeforeHookWrapper(requestData, span);\n\n        const endWrapper = (requestData: RequestRawData, span: Span) => {\n          return function (args) {\n            if (isEmptyString(requestData.request.body)) {\n              const body = Http.extractBodyFromWriteOrEndFunc(args);\n              requestData.request.body += body;\n              const scrubbed = CommonUtils.scrubRequestDataPayload(requestData.request);\n              span.setAttribute('http.request.body', scrubbed);\n            }\n          };\n        };\n\n        hook(request, 'end', { beforeHook: endWrapper });\n        hook(request, 'emit', { beforeHook: emitWrapper });\n        hook(request, 'write', { beforeHook: writeWrapper });\n      })();\n    }\n  },\n  responseHook(span: Span, response: IncomingMessage | (ServerResponse & { headers?: any })) {\n    const scrubbedHeaders = CommonUtils.payloadStringify(response.headers);\n    if (response.headers) {\n      span.setAttribute('http.response.headers', scrubbedHeaders);\n    }\n  },\n};\n\nexport class Http {\n  static onRequestEnd(span: Span & { attributes: Record<string, string> }) {\n    return (requestRawData: RequestRawData, options: OnRequestEndOptionsType) => {\n      const { body, headers, statusCode, truncated } = options;\n      requestRawData.response.body = body;\n      requestRawData.response.headers = headers;\n      requestRawData.response.statusCode = statusCode;\n      requestRawData.response.truncated = truncated;\n      const scrubbed = CommonUtils.scrubRequestDataPayload(requestRawData.response);\n      span.setAttribute('http.response.body', scrubbed);\n      try {\n        if (isAwsService(requestRawData.request.host, requestRawData.response)) {\n          span.setAttributes(getAwsServiceData(requestRawData.request, requestRawData.response));\n          span.setAttribute('aws.region', span.attributes?.['http.host'].split('.')[1]);\n        }\n      } catch (e) {\n        logger.debug('Failed to parse aws service data', e);\n        logger.debug('getHttpSpan args', { requestData: requestRawData });\n      }\n    };\n  }\n\n  static extractBodyFromEmitSocketEvent(socketEventArgs) {\n    return safeExecute(\n      () => {\n        if (\n          socketEventArgs &&\n          socketEventArgs._httpMessage &&\n          socketEventArgs._httpMessage._hasBody\n        ) {\n          const httpMessage = socketEventArgs._httpMessage;\n          let lines = [];\n          // eslint-disable-next-line no-prototype-builtins\n          if (httpMessage.hasOwnProperty('outputData')) {\n            lines = httpMessage.outputData[0]?.data.split('\\n') || [];\n            // eslint-disable-next-line no-prototype-builtins\n          } else if (httpMessage.hasOwnProperty('output')) {\n            lines = httpMessage.output[0]?.split('\\n') || [];\n          }\n          if (lines.length > 0) {\n            return lines[lines.length - 1];\n          }\n        }\n      },\n      'failed to extractBodyFromEmitSocketEvent',\n      'warn'\n    )();\n  }\n\n  static getRequestHeaders(request: RequestType) {\n    return request.headers || request.getHeaders();\n  }\n\n  static extractBodyFromWriteOrEndFunc = (writeEventArgs) => {\n    return safeExecute(() => {\n      if (isValidHttpRequestBody(writeEventArgs[0])) {\n        const encoding = isEncodingType(writeEventArgs[1]) ? writeEventArgs[1] : 'utf8';\n        return typeof writeEventArgs[0] === 'string'\n          ? new Buffer(writeEventArgs[0]).toString(encoding)\n          : writeEventArgs[0].toString();\n      }\n    })();\n  };\n\n  static httpRequestArguments(args) {\n    if (args.length === 0) {\n      throw new Error('http/s.request(...) was called without any arguments.');\n    }\n\n    let url = undefined;\n    let options = undefined;\n    let callback = undefined;\n\n    if (typeof args[0] === 'string' || args[0] instanceof URL) {\n      url = args[0];\n      if (args[1]) {\n        if (typeof args[1] === 'function') {\n          callback = args[1];\n        } else {\n          options = args[1];\n          if (typeof args[2] === 'function') {\n            callback = args[2];\n          }\n        }\n      }\n    } else {\n      options = args[0];\n      if (typeof args[1] === 'function') {\n        callback = args[1];\n      }\n    }\n    return { url, options, callback };\n  }\n\n  static getHostFromOptionsOrUrl(options, url) {\n    if (url) {\n      return new URL(url).hostname;\n    }\n    return options.hostname || options.host || (options.uri && options.uri.hostname) || 'localhost';\n  }\n\n  static httpRequestWriteBeforeHookWrapper(requestData: RequestRawData, span: Span) {\n    return function (args) {\n      if (isEmptyString(requestData.request.body)) {\n        const body = Http.extractBodyFromWriteOrEndFunc(args);\n        requestData.request.body += body;\n        const scrubbed = CommonUtils.scrubRequestDataPayload(requestData.request);\n        span.setAttribute('http.request.body', scrubbed);\n      }\n    };\n  }\n\n  static createEmitResponseOnEmitBeforeHookHandler(\n    requestRawData: RequestRawData,\n    response: any,\n    onRequestEnd: (requestRawData: RequestRawData, options: OnRequestEndOptionsType) => void\n  ) {\n    let body = '';\n    const maxPayloadSize = getMaxSize();\n    return function (args) {\n      let truncated = false;\n      const { headers, statusCode } = response;\n      if (args[0] === 'data' && body.length < maxPayloadSize) {\n        let chunk = args[1].toString();\n        const allowedLengthToAdd = maxPayloadSize - body.length;\n        //if we reached or close to limit get only substring of the part to reach the limit\n        if (chunk.length > allowedLengthToAdd) {\n          truncated = true;\n          chunk = chunk.substr(0, allowedLengthToAdd);\n        }\n        body += chunk;\n      }\n      if (args[0] === 'end') {\n        onRequestEnd(requestRawData, { body, truncated, headers, statusCode });\n      }\n    };\n  }\n\n  static createEmitResponseHandler(\n    requestData: RequestRawData,\n    span: Span & { attributes: Record<string, string> }\n  ) {\n    return (response) => {\n      const onHandler = Http.createEmitResponseOnEmitBeforeHookHandler(\n        requestData,\n        response,\n        Http.onRequestEnd(span)\n      );\n      hook(response, 'emit', {\n        beforeHook: onHandler,\n      });\n    };\n  }\n\n  static httpRequestEmitBeforeHookWrapper(\n    requestData: RequestRawData,\n    span: Span & { attributes: Record<string, string> }\n  ) {\n    const emitResponseHandler = Http.createEmitResponseHandler(requestData, span);\n    const oneTimerEmitResponseHandler = runOneTimeWrapper(emitResponseHandler, {});\n    return function (args) {\n      if (args[0] === 'response') {\n        oneTimerEmitResponseHandler(args[1]);\n      }\n      if (args[0] === 'socket') {\n        if (isEmptyString(requestData.request.body)) {\n          const body = Http.extractBodyFromEmitSocketEvent(args[1]);\n          requestData.request.body += body;\n          const scrubbed = CommonUtils.scrubRequestDataPayload(requestData.request);\n          span.setAttribute('http.request.body', scrubbed);\n        }\n      }\n    };\n  }\n}\n"]}