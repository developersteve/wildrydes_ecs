{"version":3,"file":"logsInstrumentation.js","sourceRoot":"","sources":["../../../src/instrumentations/logsInstrumentation.ts"],"names":[],"mappings":";;AAAA,oEAIwC;AACxC,4CAA8C;AAE9C,wCAAoC;AAEpC,MAAqB,mBAAoB,SAAQ,qCAAwB;IAIvE;QACE,KAAK,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;QAwBjC,gBAAW,GAAG,CAAC,eAAe,EAAE,KAAK,EAAE,EAAE;YAC/C,OAAO,CAAC,QAAQ,EAAE,EAAE;gBAClB,OAAO;gBACL,sEAAsE;gBACtE,OAAO,EACP,OAAO,EACP,EAAE;oBACF,IAAI,MAAM,CAAC;oBACX,IAAI,gBAAgB,CAAC;oBACrB,IAAI;wBACF,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;qBAC5C;oBAAC,OAAO,CAAC,EAAE,GAAE;oBACd,eAAe,CAAC,MAAM,CAAC,eAAe,CACpC,WAAW,EACX;wBACE,IAAI,EAAE,cAAQ,CAAC,QAAQ;wBACvB,UAAU,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,gBAAgB,EAAE;qBAC/D,EACD,CAAC,IAAI,EAAE,EAAE;wBACP,IAAI,CAAC,GAAG,EAAE,CAAC;wBACX,OAAO,IAAI,CAAC;oBACd,CAAC,CACF,CAAC;oBACF,MAAM,GAAG,OAAO;wBACd,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;wBAC1C,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;oBACpC,OAAO,MAAM,CAAC;gBAChB,CAAC,CAAC;YACJ,CAAC,CAAC;QACJ,CAAC,CAAC;IApDF,CAAC;IAES,IAAI;QAIZ,gBAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAE3C,OAAO;YACL,IAAI,qDAAmC,CACrC,SAAS,EACT,CAAC,GAAG,CAAC,EACL,CAAC,aAAa,EAAE,aAAa,EAAE,EAAE;gBAC/B,MAAM,eAAe,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC;gBAC7E,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC;gBAC/E,OAAO,aAAa,CAAC;YACvB,CAAC,EACD,CAAC,OAAO,EAAE,EAAE,GAAE,CAAC,EACf,EAAE,CACH;SACF,CAAC;IACJ,CAAC;CA+BF;AA3DD,sCA2DC","sourcesContent":["import {\n  InstrumentationBase,\n  InstrumentationModuleDefinition,\n  InstrumentationNodeModuleDefinition,\n} from '@opentelemetry/instrumentation';\nimport { SpanKind } from '@opentelemetry/api';\n\nimport { logger } from '../logging';\n\nexport default class LogsInstrumentation extends InstrumentationBase<any> {\n  instrumentationDescription: string;\n  supportedVersions: string[];\n\n  constructor() {\n    super('logs-instrumentation', '0.0.1');\n  }\n\n  protected init():\n    | InstrumentationModuleDefinition<any>\n    | InstrumentationModuleDefinition<any>[]\n    | void {\n    logger.debug('in console instrumentation');\n\n    return [\n      new InstrumentationNodeModuleDefinition<any>(\n        'console',\n        ['*'],\n        (moduleExports, moduleVersion) => {\n          const instrumentation = this;\n          this._wrap(moduleExports, 'warn', this.logsWrapper(instrumentation, 'warn'));\n          this._wrap(moduleExports, 'error', this.logsWrapper(instrumentation, 'error'));\n          return moduleExports;\n        },\n        (exports) => {},\n        []\n      ),\n    ];\n  }\n  private logsWrapper = (instrumentation, level) => {\n    return (original) => {\n      return (\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        message,\n        options\n      ) => {\n        let result;\n        let stringifyOptions;\n        try {\n          stringifyOptions = JSON.stringify(options);\n        } catch (e) {}\n        instrumentation.tracer.startActiveSpan(\n          'logs-span',\n          {\n            kind: SpanKind.INTERNAL,\n            attributes: { log: message, level, options: stringifyOptions },\n          },\n          (span) => {\n            span.end();\n            return span;\n          }\n        );\n        result = options\n          ? original.apply(this, [message, options])\n          : original.apply(this, [message]);\n        return result;\n      };\n    };\n  };\n}\n"]}