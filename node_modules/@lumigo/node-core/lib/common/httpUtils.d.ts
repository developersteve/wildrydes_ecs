import { HttpRawRequest, HttpRawResponse, RequestRawData } from '../types/spans';
import { ScrubContext } from './secrets';
/**
 * @deprecated Pass a `ScrubContext` instance to `scrub` or `payloadStringify`
 */
export declare const keyToOmitRegexes: (regexesEnvVarName?: string) => RegExp[];
export declare const prune: (str: string | object, maxLength: number) => string;
export declare const payloadStringify: (payload: any, maxPayloadSize?: number, skipScrubPath?: any, truncated?: boolean, scrubContext?: ScrubContext) => string;
export declare function scrub(payload: any, headers: any, sizeLimit: number, truncated?: boolean, scrubContext?: ScrubContext.HTTP_REQUEST_BODY | ScrubContext.HTTP_RESPONSE_BODY): string;
export declare function scrubRequestDataPayload(requestData: HttpRawRequest | HttpRawResponse, scrubContext?: ScrubContext.HTTP_REQUEST_BODY | ScrubContext.HTTP_RESPONSE_BODY): string;
export declare const spanHasErrors: (requestRawData: RequestRawData) => boolean;
export declare const decodeHttpBody: (httpBody: any, hasError: boolean) => any | string;
