"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultSecretScrubber = exports.processEnvironmentSecretScrubber = exports.httpQueryParamsSecretScrubber = exports.httpResponseHeadersSecretScrubber = exports.httpResponseBodiesSecretScrubber = exports.httpRequestHeadersSecretScrubber = exports.httpRequestBodiesSecretScrubber = exports.ScrubContext = void 0;
const logger_1 = require("../logger");
const utils_1 = require("../utils");
var ScrubContext;
(function (ScrubContext) {
    ScrubContext[ScrubContext["DEFAULT"] = 0] = "DEFAULT";
    ScrubContext[ScrubContext["HTTP_REQUEST_BODY"] = 1] = "HTTP_REQUEST_BODY";
    ScrubContext[ScrubContext["HTTP_REQUEST_HEADERS"] = 2] = "HTTP_REQUEST_HEADERS";
    ScrubContext[ScrubContext["HTTP_REQUEST_QUERY"] = 3] = "HTTP_REQUEST_QUERY";
    ScrubContext[ScrubContext["HTTP_RESPONSE_BODY"] = 4] = "HTTP_RESPONSE_BODY";
    ScrubContext[ScrubContext["HTTP_RESPONSE_HEADERS"] = 5] = "HTTP_RESPONSE_HEADERS";
    ScrubContext[ScrubContext["PROCESS_ENVIRONMENT"] = 6] = "PROCESS_ENVIRONMENT";
})(ScrubContext = exports.ScrubContext || (exports.ScrubContext = {}));
class EnvironmentVariableBasedSecretScrubber {
    constructor(overrideEnvVarName) {
        let sourceEnvVar;
        if (overrideEnvVarName && process.env[overrideEnvVarName]) {
            sourceEnvVar = overrideEnvVarName;
        }
        else if (process.env[utils_1.LUMIGO_SECRET_MASKING_REGEX]) {
            sourceEnvVar = utils_1.LUMIGO_SECRET_MASKING_REGEX;
        }
        else if (process.env[utils_1.LUMIGO_SECRET_MASKING_REGEX_BACKWARD_COMP]) {
            sourceEnvVar = utils_1.LUMIGO_SECRET_MASKING_REGEX_BACKWARD_COMP;
        }
        const regExps = sourceEnvVar ? process.env[sourceEnvVar] : '';
        let expressionStrings = utils_1.OMITTING_KEYS_REGEXES;
        if (regExps === utils_1.LUMIGO_SECRET_MASKING_ALL_MAGIC) {
            expressionStrings = ['.*'];
        }
        else if (regExps) {
            try {
                expressionStrings = JSON.parse(regExps);
            }
            catch (err) {
                (0, logger_1.getLogger)().warn(`Failed to parse the masking regex: '${regExps}' set in the '${sourceEnvVar}' environment variable; ` +
                    'it must either be "all" or a stringified JSON array of regular expressions, e.g.: \'["a.*","b.*"]\'. ' +
                    `Falling back to default: '${utils_1.OMITTING_KEYS_REGEXES}'`);
            }
        }
        this.expressions = expressionStrings.map((e) => new RegExp(e, 'i'));
    }
}
exports.httpRequestBodiesSecretScrubber = new EnvironmentVariableBasedSecretScrubber(utils_1.LUMIGO_SECRET_MASKING_REGEX_HTTP_REQUEST_BODIES);
exports.httpRequestHeadersSecretScrubber = new EnvironmentVariableBasedSecretScrubber(utils_1.LUMIGO_SECRET_MASKING_REGEX_HTTP_REQUEST_HEADERS);
exports.httpResponseBodiesSecretScrubber = new EnvironmentVariableBasedSecretScrubber(utils_1.LUMIGO_SECRET_MASKING_REGEX_HTTP_RESPONSE_BODIES);
exports.httpResponseHeadersSecretScrubber = new EnvironmentVariableBasedSecretScrubber(utils_1.LUMIGO_SECRET_MASKING_REGEX_HTTP_RESPONSE_HEADERS);
exports.httpQueryParamsSecretScrubber = new EnvironmentVariableBasedSecretScrubber(utils_1.LUMIGO_SECRET_MASKING_REGEX_HTTP_QUERY_PARAMS);
exports.processEnvironmentSecretScrubber = new EnvironmentVariableBasedSecretScrubber(utils_1.LUMIGO_SECRET_MASKING_REGEX_ENVIRONMENT);
exports.defaultSecretScrubber = new EnvironmentVariableBasedSecretScrubber();
//# sourceMappingURL=secrets.js.map