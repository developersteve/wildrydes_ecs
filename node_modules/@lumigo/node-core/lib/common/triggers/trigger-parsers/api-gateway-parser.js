"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayMessageParser = void 0;
const trigger_parser_base_1 = require("./trigger-parser-base");
const generalUtils_1 = require("../../generalUtils");
const message_trigger_enum_1 = require("../message-trigger.enum");
class ApiGatewayMessageParser extends trigger_parser_base_1.MessageTriggerParser {
    constructor() {
        super(...arguments);
        this._shouldHandle = (message) => {
            var _a, _b;
            return (((message === null || message === void 0 ? void 0 : message['httpMethod']) && ((_a = message === null || message === void 0 ? void 0 : message['requestContext']) === null || _a === void 0 ? void 0 : _a['stage'])) ||
                ((message === null || message === void 0 ? void 0 : message['headers']) &&
                    (message === null || message === void 0 ? void 0 : message['version']) === '2.0' &&
                    ((_b = message === null || message === void 0 ? void 0 : message['requestContext']) === null || _b === void 0 ? void 0 : _b['stage'])));
        };
        this.handle = (message, targetId) => {
            const version = message === null || message === void 0 ? void 0 : message['version'];
            if (version === '2.0') {
                return this.getApiGatewayV2Data(message, targetId);
            }
            return this.getApiGatewayV1Data(message, targetId);
        };
        this.getApiGatewayV1Data = (message, targetId) => {
            const { headers, resource, httpMethod, requestContext } = message;
            const { stage } = requestContext;
            const api = (headers === null || headers === void 0 ? void 0 : headers.Host) || null;
            const messageId = requestContext.requestId;
            return {
                id: (0, generalUtils_1.getRandomId)(),
                targetId: targetId,
                triggeredBy: message_trigger_enum_1.MessageTrigger.ApiGateway,
                fromMessageIds: [messageId],
                extra: { api, stage, httpMethod, resource },
            };
        };
        this.getApiGatewayV2Data = (message, targetId) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const httpMethod = (_b = (_a = message.requestContext) === null || _a === void 0 ? void 0 : _a.http) === null || _b === void 0 ? void 0 : _b.method;
            const resource = (_d = (_c = message.requestContext) === null || _c === void 0 ? void 0 : _c.http) === null || _d === void 0 ? void 0 : _d.path;
            const messageId = (_e = message.requestContext) === null || _e === void 0 ? void 0 : _e.requestId;
            const api = ((_f = message.requestContext) === null || _f === void 0 ? void 0 : _f.domainName) || null;
            const stage = ((_g = message.requestContext) === null || _g === void 0 ? void 0 : _g.stage) || 'unknown';
            return {
                id: (0, generalUtils_1.getRandomId)(),
                targetId: targetId,
                triggeredBy: message_trigger_enum_1.MessageTrigger.ApiGateway,
                fromMessageIds: messageId ? [messageId] : [],
                extra: { api, stage, httpMethod, resource },
            };
        };
    }
}
exports.ApiGatewayMessageParser = ApiGatewayMessageParser;
//# sourceMappingURL=api-gateway-parser.js.map