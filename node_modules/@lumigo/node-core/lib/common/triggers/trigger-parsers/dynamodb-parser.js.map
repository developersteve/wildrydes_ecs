{"version":3,"file":"dynamodb-parser.js","sourceRoot":"","sources":["../../../../src/common/triggers/trigger-parsers/dynamodb-parser.ts"],"names":[],"mappings":";;;AACA,+DAA6D;AAC7D,qDAA0D;AAC1D,kEAAyD;AAEzD,MAAa,qBAAsB,SAAQ,0CAAoB;IAA/D;;QACE,kBAAa,GAAG,CAAC,OAAwB,EAAW,EAAE;;YACpD,OAAO,CAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAG,CAAC,CAAC,0CAAE,WAAW,MAAK,cAAc,CAAC;QAC/D,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,OAAwB,EAAE,QAAuB,EAAW,EAAE;;YACtE,MAAM,GAAG,GAAG,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAG,CAAC,CAAC,0CAAE,cAAc,CAAC;YAClD,MAAM,uBAAuB,GAC3B,CAAC,CAAA,MAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAG,CAAC,CAAC,0CAAE,QAAQ,0CAAE,2BAA2B,KAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YAC7E,MAAM,UAAU,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;;gBAClD,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,KAAI,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,0CAAE,IAAI,CAAA,EAAE;oBAC7E,OAAO,IAAA,sBAAO,EAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACtC;qBAAM,IAAI,MAAM,CAAC,SAAS,KAAK,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE;oBACvF,OAAO,IAAA,sBAAO,EAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;iBAC1C;YACH,CAAC,EAAE,MAAM,CAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,mBAAmB,IAAI,IAAI,CAAC,CAAC;YAChE,OAAO;gBACL,EAAE,EAAE,IAAA,0BAAW,GAAE;gBACjB,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,qCAAc,CAAC,QAAQ;gBACpC,cAAc,EAAE,UAAU;gBAC1B,KAAK,EAAE;oBACL,GAAG;oBACH,uBAAuB;iBACxB;aACF,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CAAA;AA3BD,sDA2BC","sourcesContent":["import { IncomingMessage, Trigger } from '../trigger-data.types';\nimport { MessageTriggerParser } from './trigger-parser-base';\nimport { getRandomId, md5Hash } from '../../generalUtils';\nimport { MessageTrigger } from '../message-trigger.enum';\n\nexport class DynamodbMessageParser extends MessageTriggerParser {\n  _shouldHandle = (message: IncomingMessage): boolean => {\n    return message?.Records?.[0]?.eventSource === 'aws:dynamodb';\n  };\n\n  handle = (message: IncomingMessage, targetId: string | null): Trigger => {\n    const arn = message?.Records?.[0]?.eventSourceARN;\n    const approxEventCreationTime =\n      (message?.Records?.[0]?.dynamodb?.ApproximateCreationDateTime || 0) * 1000;\n    const messageIds = message?.Records?.map((record) => {\n      if (['MODIFY', 'REMOVE'].includes(record.eventName) && record?.dynamodb?.Keys) {\n        return md5Hash(record.dynamodb.Keys);\n      } else if (record.eventName === 'INSERT' && record.dynamodb && record.dynamodb.NewImage) {\n        return md5Hash(record.dynamodb.NewImage);\n      }\n    }).filter((hashedRecordContent) => hashedRecordContent != null);\n    return {\n      id: getRandomId(),\n      targetId: targetId,\n      triggeredBy: MessageTrigger.DynamoDB,\n      fromMessageIds: messageIds,\n      extra: {\n        arn,\n        approxEventCreationTime,\n      },\n    };\n  };\n}\n"]}