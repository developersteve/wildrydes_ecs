{"version":3,"file":"event-bridge-parser.js","sourceRoot":"","sources":["../../../../src/common/triggers/trigger-parsers/event-bridge-parser.ts"],"names":[],"mappings":";;;AACA,+DAA6D;AAC7D,qDAAiD;AACjD,kEAAyD;AAEzD,MAAa,wBAAyB,SAAQ,0CAAoB;IAAlE;;QACE,qBAAgB,GAAG,aAAa,CAAC;QAEjC,kBAAa,GAAG,CAAC,OAAwB,EAAW,EAAE;YACpD,OAAO,CACL,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAA,KAAK,QAAQ;gBACpC,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,EAAE,CAAA,KAAK,QAAQ;gBAC/B,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,aAAa,CAAC,CAAA,KAAK,QAAQ;gBAC5C,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA,KAAK,QAAQ;gBACnC,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAA,KAAK,QAAQ;gBACjC,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA,KAAK,QAAQ;gBACnC,KAAK,CAAC,OAAO,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC;gBACjC,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAA,KAAK,QAAQ,CACpC,CAAC;QACJ,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,OAAwB,EAAE,QAAuB,EAAW,EAAE;YACtE,OAAO;gBACL,EAAE,EAAE,IAAA,0BAAW,GAAE;gBACjB,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,qCAAc,CAAC,WAAW;gBACvC,cAAc,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC;aAC7B,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CAAA;AAxBD,4DAwBC","sourcesContent":["import { IncomingMessage, Trigger } from '../trigger-data.types';\nimport { MessageTriggerParser } from './trigger-parser-base';\nimport { getRandomId } from '../../generalUtils';\nimport { MessageTrigger } from '../message-trigger.enum';\n\nexport class EventBridgeMessageParser extends MessageTriggerParser {\n  INNER_IDENTIFIER = 'detail-type';\n\n  _shouldHandle = (message: IncomingMessage): boolean => {\n    return (\n      typeof message?.version === 'string' &&\n      typeof message?.id === 'string' &&\n      typeof message?.['detail-type'] === 'string' &&\n      typeof message?.source === 'string' &&\n      typeof message?.time === 'string' &&\n      typeof message?.region === 'string' &&\n      Array.isArray(message?.resources) &&\n      typeof message?.detail === 'object'\n    );\n  };\n\n  handle = (message: IncomingMessage, targetId: string | null): Trigger => {\n    return {\n      id: getRandomId(),\n      targetId: targetId,\n      triggeredBy: MessageTrigger.EventBridge,\n      fromMessageIds: [message.id],\n    };\n  };\n}\n"]}