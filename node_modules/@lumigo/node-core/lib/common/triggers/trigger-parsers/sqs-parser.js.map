{"version":3,"file":"sqs-parser.js","sourceRoot":"","sources":["../../../../src/common/triggers/trigger-parsers/sqs-parser.ts"],"names":[],"mappings":";;;AACA,+DAA6D;AAC7D,kEAAyD;AACzD,qDAAiD;AAEjD,MAAa,gBAAiB,SAAQ,0CAAoB;IAA1D;;QACE,kBAAa,GAAG,CAAC,OAAwB,EAAW,EAAE;;YACpD,OAAO,CAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAG,CAAC,CAAC,0CAAE,WAAW,MAAK,SAAS,CAAC;QAC1D,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,OAAwB,EAAE,QAAuB,EAAW,EAAE;YACtE,MAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;YAC9C,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3F,OAAO;gBACL,EAAE,EAAE,IAAA,0BAAW,GAAE;gBACjB,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,qCAAc,CAAC,GAAG;gBAC/B,cAAc,EAAE,UAAU;gBAC1B,KAAK,EAAE,EAAE,GAAG,EAAE;aACf,CAAC;QACJ,CAAC,CAAC;QAEF,iBAAY,GAAG,CAAC,OAAwB,EAAY,EAAE;YACpD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC/E,CAAC,CAAC;IACJ,CAAC;CAAA;AArBD,4CAqBC","sourcesContent":["import { IncomingMessage, Trigger } from '../trigger-data.types';\nimport { MessageTriggerParser } from './trigger-parser-base';\nimport { MessageTrigger } from '../message-trigger.enum';\nimport { getRandomId } from '../../generalUtils';\n\nexport class SqsMessageParser extends MessageTriggerParser {\n  _shouldHandle = (message: IncomingMessage): boolean => {\n    return message?.Records?.[0]?.eventSource === 'aws:sqs';\n  };\n\n  handle = (message: IncomingMessage, targetId: string | null): Trigger => {\n    const arn = message.Records[0].eventSourceARN;\n    const messageIds = [];\n    message.Records.forEach((record) => record.messageId && messageIds.push(record.messageId));\n    return {\n      id: getRandomId(),\n      targetId: targetId,\n      triggeredBy: MessageTrigger.SQS,\n      fromMessageIds: messageIds,\n      extra: { arn },\n    };\n  };\n\n  extractInner = (message: IncomingMessage): string[] => {\n    return message.Records.map((record) => record.body).filter((body) => !!body);\n  };\n}\n"]}