{"version":3,"file":"triggers.js","sourceRoot":"","sources":["../../../src/common/triggers/triggers.ts"],"names":[],"mappings":";;;AACA,6EAA+E;AAC/E,qEAAwE;AACxE,uEAA0E;AAC1E,+EAAiF;AACjF,qEAAwE;AACxE,2DAA8D;AAC9D,6DAAgE;AAChE,6DAAgE;AAChE,uCAAuC;AAEvC,oDAA0F;AAC1F,uCAA0C;AAC1C,yCAAyC;AAE5B,QAAA,uBAAuB,GAAgC;IAClE,IAAI,4CAAuB,EAAE;IAC7B,IAAI,qCAAoB,EAAE;IAC1B,IAAI,uCAAqB,EAAE;IAC3B,IAAI,8CAAwB,EAAE;IAC9B,IAAI,qCAAoB,EAAE;IAC1B,IAAI,2BAAe,EAAE;IACrB,IAAI,6BAAgB,EAAE;IACtB,IAAI,6BAAgB,EAAE;CACvB,CAAC;AACW,QAAA,iCAAiC,GAAG,IAAI,MAAM,CACzD,GAAG;IACD,+BAAuB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC;SAC7D,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SAClB,IAAI,CAAC,GAAG,CAAC;IACZ,GAAG,CACN,CAAC;AAEK,MAAM,sBAAsB,GAAG,CACpC,OAAwB,EACxB,WAA0B,IAAI,EAC9B,KAAK,GAAG,CAAC,EACE,EAAE;IACb,OAAO,IAAA,mBAAW,EAChB,GAAG,EAAE;QACH,IAAI,KAAK,GAAG,IAAA,0CAA0B,GAAE,EAAE;YACxC,IAAA,kBAAS,GAAE,CAAC,IAAI,CAAC,2BAA2B,KAAK,kCAAkC,CAAC,CAAC;YACrF,OAAO,EAAE,CAAC;SACX;QACD,OAAO,+BAAuB,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aAC5E,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACd,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YACjD,IAAI,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACjD,IAAI,aAAa,CAAC,MAAM,GAAG,IAAA,0CAA0B,GAAE,EAAE;gBACvD,IAAA,kBAAS,GAAE,CAAC,IAAI,CACd,oCAAoC,aAAa,CAAC,MAAM,kCAAkC,CAC3F,CAAC;gBACF,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,IAAA,0CAA0B,GAAE,CAAC,CAAC;aACtE;YAED,MAAM,aAAa,GACjB,IAAA,mBAAW,EAAC,GAAG,EAAE,CACf,aAAa;iBACV,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,yCAAiC,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC7E,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CACpB,IAAA,8BAAsB,EAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,KAAK,GAAG,CAAC,CAAC,CACxE;iBACA,IAAI,EAAE,CACV,EAAE,IAAI,EAAE,CAAC;YACZ,OAAO,CAAC,OAAO,EAAE,GAAG,aAAa,CAAC,CAAC;QACrC,CAAC,CAAC;aACD,IAAI,EAAE,CAAC;IACZ,CAAC,EACD,0BAA0B,EAC1B,MAAM,CAAC,UAAU,CAAC,OAAO,EACzB,EAAE,CACH,EAAE,CAAC;AACN,CAAC,CAAC;AAvCW,QAAA,sBAAsB,0BAuCjC","sourcesContent":["import type { IncomingMessage, Trigger } from './trigger-data.types';\nimport { ApiGatewayMessageParser } from './trigger-parsers/api-gateway-parser';\nimport { AppSyncMessageParser } from './trigger-parsers/appsync-parser';\nimport { DynamodbMessageParser } from './trigger-parsers/dynamodb-parser';\nimport { EventBridgeMessageParser } from './trigger-parsers/event-bridge-parser';\nimport { KinesisMessageParser } from './trigger-parsers/kinesis-parser';\nimport { S3MessageParser } from './trigger-parsers/s3-parser';\nimport { SnsMessageParser } from './trigger-parsers/sns-parser';\nimport { SqsMessageParser } from './trigger-parsers/sqs-parser';\nimport * as logger from '../../logger';\nimport { MessageTriggerParser } from './trigger-parsers/trigger-parser-base';\nimport { getChainedServicesMaxDepth, getChainedServicesMaxWidth } from '../configuration';\nimport { safeExecute } from '../../utils';\nimport { getLogger } from '../../logger';\n\nexport const MESSAGE_TRIGGER_PARSERS: Array<MessageTriggerParser> = [\n  new ApiGatewayMessageParser(),\n  new AppSyncMessageParser(),\n  new DynamodbMessageParser(),\n  new EventBridgeMessageParser(),\n  new KinesisMessageParser(),\n  new S3MessageParser(),\n  new SnsMessageParser(),\n  new SqsMessageParser(),\n];\nexport const INNER_MESSAGES_IDENTIFIER_PATTERN = new RegExp(\n  '(' +\n    MESSAGE_TRIGGER_PARSERS.map((parser) => parser.INNER_IDENTIFIER)\n      .filter((x) => !!x)\n      .join('|') +\n    ')'\n);\n\nexport const recursiveParseTriggers = (\n  message: IncomingMessage,\n  targetId: string | null = null,\n  level = 0\n): Trigger[] => {\n  return safeExecute(\n    () => {\n      if (level > getChainedServicesMaxDepth()) {\n        getLogger().info(`Chained services depth (${level}) exceeds limit, parsing stopped`);\n        return [];\n      }\n      return MESSAGE_TRIGGER_PARSERS.filter((parser) => parser.shouldHandle(message))\n        .map((parser) => {\n          const trigger = parser.handle(message, targetId);\n          let innerMessages = parser.extractInner(message);\n          if (innerMessages.length > getChainedServicesMaxWidth()) {\n            getLogger().info(\n              `Chained services messages width (${innerMessages.length}) exceeds limit, parsing stopped`\n            );\n            innerMessages = innerMessages.slice(0, getChainedServicesMaxWidth());\n          }\n\n          const innerTriggers =\n            safeExecute(() =>\n              innerMessages\n                .filter((message) => message.search(INNER_MESSAGES_IDENTIFIER_PATTERN) !== -1)\n                .map((innerMessage) =>\n                  recursiveParseTriggers(JSON.parse(innerMessage), trigger.id, level + 1)\n                )\n                .flat()\n            )() || [];\n          return [trigger, ...innerTriggers];\n        })\n        .flat();\n    },\n    'Error in message parsing',\n    logger.LOG_LEVELS.WARNING,\n    []\n  )();\n};\n"]}