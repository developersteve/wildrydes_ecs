"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.recursiveParseTriggers = exports.INNER_MESSAGES_IDENTIFIER_PATTERN = exports.MESSAGE_TRIGGER_PARSERS = void 0;
const api_gateway_parser_1 = require("./trigger-parsers/api-gateway-parser");
const appsync_parser_1 = require("./trigger-parsers/appsync-parser");
const dynamodb_parser_1 = require("./trigger-parsers/dynamodb-parser");
const event_bridge_parser_1 = require("./trigger-parsers/event-bridge-parser");
const kinesis_parser_1 = require("./trigger-parsers/kinesis-parser");
const s3_parser_1 = require("./trigger-parsers/s3-parser");
const sns_parser_1 = require("./trigger-parsers/sns-parser");
const sqs_parser_1 = require("./trigger-parsers/sqs-parser");
const logger = require("../../logger");
const configuration_1 = require("../configuration");
const utils_1 = require("../../utils");
const logger_1 = require("../../logger");
exports.MESSAGE_TRIGGER_PARSERS = [
    new api_gateway_parser_1.ApiGatewayMessageParser(),
    new appsync_parser_1.AppSyncMessageParser(),
    new dynamodb_parser_1.DynamodbMessageParser(),
    new event_bridge_parser_1.EventBridgeMessageParser(),
    new kinesis_parser_1.KinesisMessageParser(),
    new s3_parser_1.S3MessageParser(),
    new sns_parser_1.SnsMessageParser(),
    new sqs_parser_1.SqsMessageParser(),
];
exports.INNER_MESSAGES_IDENTIFIER_PATTERN = new RegExp('(' +
    exports.MESSAGE_TRIGGER_PARSERS.map((parser) => parser.INNER_IDENTIFIER)
        .filter((x) => !!x)
        .join('|') +
    ')');
const recursiveParseTriggers = (message, targetId = null, level = 0) => {
    return (0, utils_1.safeExecute)(() => {
        if (level > (0, configuration_1.getChainedServicesMaxDepth)()) {
            (0, logger_1.getLogger)().info(`Chained services depth (${level}) exceeds limit, parsing stopped`);
            return [];
        }
        return exports.MESSAGE_TRIGGER_PARSERS.filter((parser) => parser.shouldHandle(message))
            .map((parser) => {
            const trigger = parser.handle(message, targetId);
            let innerMessages = parser.extractInner(message);
            if (innerMessages.length > (0, configuration_1.getChainedServicesMaxWidth)()) {
                (0, logger_1.getLogger)().info(`Chained services messages width (${innerMessages.length}) exceeds limit, parsing stopped`);
                innerMessages = innerMessages.slice(0, (0, configuration_1.getChainedServicesMaxWidth)());
            }
            const innerTriggers = (0, utils_1.safeExecute)(() => innerMessages
                .filter((message) => message.search(exports.INNER_MESSAGES_IDENTIFIER_PATTERN) !== -1)
                .map((innerMessage) => (0, exports.recursiveParseTriggers)(JSON.parse(innerMessage), trigger.id, level + 1))
                .flat())() || [];
            return [trigger, ...innerTriggers];
        })
            .flat();
    }, 'Error in message parsing', logger.LOG_LEVELS.WARNING, [])();
};
exports.recursiveParseTriggers = recursiveParseTriggers;
//# sourceMappingURL=triggers.js.map