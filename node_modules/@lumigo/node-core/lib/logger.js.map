{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { isDebug, isStoreLogs } from './utils';\n\nconst WARN_CLIENT_PREFIX = 'Lumigo Warning';\nlet LOG_PREFIX = '#LUMIGO#';\n\nconst MAX_DUPLICATE_LOGS = 50;\n\nexport type LogSeverity = 'INFO' | 'WARNING' | 'FATAL' | 'DEBUG';\nexport type LogObject = {\n  stack?: string;\n  message?: string;\n} & Record<any, any>;\n\nexport const LOG_LEVELS: Record<LogSeverity, LogSeverity> = {\n  INFO: 'INFO',\n  WARNING: 'WARNING',\n  FATAL: 'FATAL',\n  DEBUG: 'DEBUG',\n};\n\nexport interface LoggerInterface {\n  info: (msg: string, obj?: object) => void;\n  warn: (msg: string, obj?: object) => void;\n  fatal: (msg: string, obj?: object) => void;\n  log: (levelname: LogSeverity, msg: string, obj?: LogObject) => void;\n  warnClient: (msg: string, obj?: LogObject) => boolean;\n  debug: (msg: string, obj?: LogObject) => void;\n  LOG_LEVELS: Record<LogSeverity, LogSeverity>;\n}\n\nconst removeCircleFromJson = () => {\n  const cache = [];\n  return (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      // Duplicate reference found, discard key\n      if (cache.includes(value)) return;\n\n      // Store value in our collection\n      cache.push(value);\n    }\n    return value;\n  };\n};\n\nexport const LogStore = (() => {\n  let logSet = new Set([]);\n  let duplicateLogsCount = 0;\n\n  const addLog = (type, message, object) => {\n    const logObj = JSON.stringify({ type, message, object }, removeCircleFromJson());\n    if (!logSet.has(logObj)) {\n      logSet.add(logObj);\n    } else {\n      duplicateLogsCount++;\n    }\n    isEmergencyMode() && printLogs();\n  };\n\n  const printLogs = () => {\n    logSet.forEach((logObj) => {\n      const { message, obj } = JSON.parse(logObj);\n      forceLog('FATAL', message, obj);\n    });\n    logSet.clear();\n  };\n\n  const isEmergencyMode = () => duplicateLogsCount >= MAX_DUPLICATE_LOGS;\n  const clean = () => {\n    logSet = new Set([]);\n    duplicateLogsCount = 0;\n  };\n  return { addLog, clean };\n})();\n\n/**\n  @deprecated\n */\n\nfunction forceLog(levelname: LogSeverity, message: string, obj?: LogObject) {\n  const escapedMessage = JSON.stringify(message, null, 0);\n  const logMsg = `${LOG_PREFIX} - ${levelname} - ${escapedMessage}`;\n  if (obj) {\n    let escapedObject = JSON.stringify(obj, null, 0);\n    if (obj.stack && obj.message) {\n      escapedObject = JSON.stringify({\n        message: obj.message,\n        stack: obj.stack,\n      });\n    }\n    // eslint-disable-next-line\n    console.log(logMsg, escapedObject);\n  } else {\n    // eslint-disable-next-line\n    console.log(logMsg);\n  }\n}\n\nconst log = (levelname: LogSeverity, message: string, obj?: LogObject) => {\n  const storeLogsIsOn = isStoreLogs();\n  storeLogsIsOn && LogStore.addLog(levelname, message, obj);\n  if (isDebug() && !storeLogsIsOn) {\n    forceLog(levelname, message, obj);\n  }\n};\n\nconst invokeLog =\n  (type) =>\n  (msg: string, obj = undefined) =>\n    log(type, msg, obj);\n\nconst info = invokeLog('INFO');\n\nconst warn = invokeLog('WARNING');\n\nconst fatal = invokeLog('FATAL');\n\nconst debug = invokeLog('DEBUG');\n\nlet coreLogger: LoggerInterface = {\n  log,\n  info,\n  warn,\n  fatal,\n  debug,\n  warnClient: (msg: string, obj?: LogObject) => {\n    if (process.env.LUMIGO_WARNINGS === 'off') {\n      debug('Does not warn the user about', msg);\n      return false;\n    }\n    if (obj)\n      // eslint-disable-next-line no-console\n      console.log(`${WARN_CLIENT_PREFIX}: ${msg}`, obj);\n    // eslint-disable-next-line no-console\n    else console.log(`${WARN_CLIENT_PREFIX}: ${msg}`);\n    return true;\n  },\n  LOG_LEVELS,\n};\n\nexport const setLogger = (logger: LoggerInterface) => (coreLogger = logger);\nexport const setLoggerPrefix = (prefix: string) => (LOG_PREFIX = prefix);\n\nexport const getLogger = () => coreLogger;\n"]}