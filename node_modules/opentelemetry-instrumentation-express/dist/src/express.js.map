{"version":3,"file":"express.js","sourceRoot":"","sources":["../../src/express.ts"],"names":[],"mappings":"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","sourcesContent":["import { getRPCMetadata } from '@opentelemetry/core';\nimport { SpanKind, diag, context } from '@opentelemetry/api';\nimport {\n    LayerPath,\n    ExpressLayer,\n    PatchedRequest,\n    PATH_STORE,\n    REQ_SPAN,\n    EXCEPTION_RECORDED,\n    ExpressInstrumentationConfig,\n    CONSUMED_ROUTE_STATE,\n    ExpressConsumedRouteState,\n} from './types';\nimport { VERSION } from './version';\nimport {\n    InstrumentationBase,\n    InstrumentationModuleDefinition,\n    InstrumentationNodeModuleDefinition,\n    InstrumentationNodeModuleFile,\n    safeExecuteInTheMiddle,\n    isWrapped,\n} from '@opentelemetry/instrumentation';\nimport type express from 'express';\nimport {\n    getRouteAttributes,\n    getHttpSpanAttributeFromRes,\n    getHttpSpanAttributesFromReq,\n    getSpanInitialName,\n    getSpanNameOnResEnd,\n    parseResponseStatus,\n} from './utils/attributes';\nimport { consumeLayerPathAndUpdateState, createInitialRouteState } from './utils/route-context';\nimport { getLayerPathFromFirstArg } from './utils/layer-path';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\nconst originalLayerStore = Symbol('otel.express-plugins.orig-layer-export');\n\nexport class ExpressInstrumentation extends InstrumentationBase<typeof express> {\n    static readonly supportedVersions = ['^4.9.0'];\n    protected override _config: ExpressInstrumentationConfig;\n\n    constructor(config: ExpressInstrumentationConfig = {}) {\n        super('opentelemetry-instrumentation-express', VERSION, Object.assign({}, config));\n    }\n\n    override setConfig(config: ExpressInstrumentationConfig = {}) {\n        this._config = Object.assign({}, config);\n    }\n\n    protected init(): InstrumentationModuleDefinition<typeof express> {\n        const layerModule = new InstrumentationNodeModuleFile<ExpressLayer>(\n            'express/lib/router/layer.js',\n            ExpressInstrumentation.supportedVersions,\n            this._patchExpressLayer.bind(this),\n            this._unpatchExpressLayer.bind(this)\n        );\n\n        const module = new InstrumentationNodeModuleDefinition<typeof express>(\n            'express',\n            ExpressInstrumentation.supportedVersions,\n            this.patch.bind(this),\n            this.unpatch.bind(this),\n            [layerModule]\n        );\n\n        return module;\n    }\n\n    protected patch(moduleExports: typeof express, moduleVersion?: string) {\n        if (moduleExports === undefined || moduleExports === null) {\n            return moduleExports;\n        }\n        diag.debug('opentelemetry.express instrumentation: patching express application lazyrouter');\n\n        // convert to any so we don't get errors because lazyrouter is not public\n        const application = moduleExports?.application as any;\n        if (isWrapped(application?.lazyrouter)) {\n            this._unwrap(application, 'lazyrouter');\n        }\n        this._wrap(application, 'lazyrouter', this.getApplicationLazyRouterPatch.bind(this, moduleVersion));\n\n        return moduleExports;\n    }\n\n    protected unpatch(moduleExports: typeof express): void {\n        diag.debug('opentelemetry.express instrumentation: unpatching Express application lazyrouter');\n        this._unwrap(moduleExports?.application as any, 'lazyrouter');\n    }\n\n    private _patchExpressLayer(moduleExports: ExpressLayer, version: string) {\n        const self = this;\n        if (moduleExports === undefined || moduleExports === null) {\n            return moduleExports;\n        }\n        const origLayerConstructor = moduleExports as unknown as Function;\n        const LayerPrototype = moduleExports.prototype;\n\n        diag.debug('opentelemetry.express instrumentation: patching Express Layer handle_request and handle_error');\n        this._wrap(LayerPrototype, 'handle_request', this._getLayerHandleRequestPatch.bind(this));\n        this._wrap(LayerPrototype, 'handle_error', this._getLayerHandleErrorPatch.bind(this));\n\n        // patch the Layer constructor to collect the 'path'\n        function OtelPatchedLayer(path, options, fn) {\n            if (!(this instanceof OtelPatchedLayer)) {\n                return new (OtelPatchedLayer as any)(path, options, fn);\n            }\n            this[PATH_STORE] = getLayerPathFromFirstArg(path, options ?? {});\n            return origLayerConstructor.call(this, path, options, fn);\n        }\n        OtelPatchedLayer.prototype = LayerPrototype;\n        OtelPatchedLayer[originalLayerStore] = moduleExports;\n\n        return OtelPatchedLayer;\n    }\n\n    private _unpatchExpressLayer(moduleExports: ExpressLayer) {\n        diag.debug('opentelemetry.express instrumentation: unpatching Express Layer');\n        const originalLayerExport = moduleExports[originalLayerStore] ?? moduleExports;\n        if (isWrapped(originalLayerExport.prototype.handle_request)) {\n            this._unwrap(originalLayerExport.prototype, 'handle_request');\n        }\n        if (isWrapped(originalLayerExport.prototype.handle_error)) {\n            this._unwrap(originalLayerExport.prototype, 'handle_error');\n        }\n        return originalLayerExport;\n    }\n\n    private _getLayerHandleRequestPatch(original: express.RequestHandler) {\n        const self = this;\n        return function (this: ExpressLayer, req: PatchedRequest, res: express.Response, next: express.NextFunction) {\n            // this is what express is doing to check if layer should be invoke\n            if (this.handle.length > 3) {\n                return original.apply(this, arguments);\n            }\n\n            const { origState, newState } = self.getRoutingStateOnConsumingPath(req, this);\n\n            const pluginNext: express.NextFunction = function errorHandlingNext(err?: any): any {\n                if (err && err !== 'route' && err !== 'router') {\n                    self._recordException(req, err);\n                }\n                self.runMiddlewareWithContext(origState, req, () => next(err));\n            };\n            return self.runMiddlewareWithContext(newState, req, () => original.call(this, req, res, pluginNext));\n        };\n    }\n\n    private _getLayerHandleErrorPatch(original: express.ErrorRequestHandler) {\n        const self = this;\n        return function (\n            this: ExpressLayer,\n            err: any,\n            req: PatchedRequest,\n            res: express.Response,\n            next: express.NextFunction\n        ) {\n            // this is what express is doing to check if layer should be invoke\n            if (this.handle.length !== 4) {\n                return original.apply(this, arguments);\n            }\n\n            const { origState, newState } = self.getRoutingStateOnConsumingPath(req, this);\n\n            const pluginNext: express.NextFunction = function errorHandlingNext(err?: any): any {\n                if (err !== 'route' && err !== 'router') {\n                    self._recordException(req, err);\n                }\n                self.runMiddlewareWithContext(origState, req, () => next(err));\n            };\n            return self.runMiddlewareWithContext(newState, req, () => original.call(this, err, req, res, pluginNext));\n        };\n    }\n\n    private _recordException(req: PatchedRequest, err: Error) {\n        try {\n            if (!err || err[EXCEPTION_RECORDED]) {\n                return;\n            }\n\n            const span = req[REQ_SPAN];\n            if (!span) {\n                return;\n            }\n            span.recordException(err);\n            // mark as recorded to avoid duplicates\n            Object.defineProperty(err, EXCEPTION_RECORDED, {\n                enumerable: false,\n                value: true,\n            });\n        } catch {}\n    }\n\n    private registerInstrumentationMiddleware(app: express.Application, moduleVersion?: string) {\n        const plugin = this;\n        app.use((req: PatchedRequest, res: express.Response, next: express.NextFunction) => {\n            // check if this app was mounted in another express app.\n            // we want the logic to run just once per request\n            if (req.hasOwnProperty(REQ_SPAN)) {\n                next();\n                return;\n            }\n\n            const spanName = getSpanInitialName(req);\n            const span = plugin.tracer.startSpan(spanName, {\n                kind: SpanKind.INTERNAL,\n                attributes: plugin._config.includeHttpAttributes ? getHttpSpanAttributesFromReq(req) : {},\n            });\n\n            if (plugin._config.requestHook) {\n                safeExecuteInTheMiddle(\n                    () => plugin._config.requestHook(span, { moduleVersion, req, res }),\n                    (e) => {\n                        if (e) diag.error(`opentelemetry.express instrumentation: requestHook error`, e);\n                    },\n                    true\n                );\n            }\n\n            Object.defineProperty(req, REQ_SPAN, {\n                enumerable: false,\n                value: span,\n            });\n\n            const oldResEnd = res.end;\n\n            res.end = function () {\n                const routeState = plugin.getCurrentRouteState(req);\n                const routeAttributes = getRouteAttributes(routeState);\n                const route = routeAttributes[SemanticAttributes.HTTP_ROUTE] as string;\n                if (route) {\n                    const rpcMetadata = getRPCMetadata(context.active());\n                    if (rpcMetadata) {\n                        rpcMetadata.route = route;\n                    }\n                }\n\n                const origRes = oldResEnd.apply(res, arguments);\n\n                span.setAttributes(routeAttributes);\n                if (plugin._config.includeHttpAttributes) {\n                    span.setAttributes(getHttpSpanAttributeFromRes(res));\n                }\n                span.setStatus(parseResponseStatus(res.statusCode!));\n\n                const newSpanName = getSpanNameOnResEnd(req, routeState);\n                if (newSpanName) {\n                    span.updateName(newSpanName);\n                }\n\n                span.end();\n\n                return origRes;\n            };\n\n            next();\n        });\n    }\n\n    private getApplicationLazyRouterPatch(moduleVersion: string, original: () => void) {\n        const self = this;\n        return function patchedLazyRouter() {\n            const origRes = original.apply(this, arguments);\n            if (!isWrapped(this._router.handle)) {\n                self._wrap(this._router, 'handle', self.getAppRouterHandlerPatch.bind(self));\n                self.registerInstrumentationMiddleware(this, moduleVersion);\n            }\n            return origRes;\n        };\n    }\n\n    private getAppRouterHandlerPatch(\n        original: (req: express.Request, res: express.Response, next: express.NextFunction) => void\n    ) {\n        const self = this;\n        return function patchedAppRouterHandle(\n            req: express.Request,\n            res: express.Response,\n            next: express.NextFunction\n        ) {\n            // check that this is indeed the entry point to the app\n            // we will hit this if on mounted app cases\n            const currentState = self.getCurrentRouteState(req);\n            if (currentState) {\n                return original.apply(this, arguments);\n            }\n\n            const initialState: ExpressConsumedRouteState = createInitialRouteState(req);\n            const patchedNext = function (err?: any) {\n                return self.runMiddlewareWithContext({ ...initialState, isUnhandled: true }, req, () => next(err));\n            };\n            return self.runMiddlewareWithContext(initialState, req, () => original.call(this, req, res, patchedNext));\n        };\n    }\n\n    private getRoutingStateOnConsumingPath(\n        req: express.Request,\n        layer: ExpressLayer\n    ): { origState: ExpressConsumedRouteState; newState: ExpressConsumedRouteState } {\n        const origContext = context.active();\n        const currentState = this.getCurrentRouteState(req);\n\n        // we must have an express context at this point (which was create at app router)\n        // if we don't, than this is an error\n        if (!currentState) {\n            const errorState = {\n                errors: ['internal error in express instrumentation: missing route context'],\n            };\n            return { origState: errorState, newState: errorState };\n        }\n        const currentLayerPath: LayerPath = layer[PATH_STORE];\n        const newExpressRouteState = consumeLayerPathAndUpdateState(currentState, req, currentLayerPath);\n        return { origState: currentState, newState: newExpressRouteState };\n    }\n\n    // we would like to rely on otel context which propagate correctly via async calls.\n    // the issue is that sometimes this mechanism fails due to timers / event emitters / thenables etc.\n    // then we get just an empty context which we cannot extract route from.\n    // so we install a fallback which should cover most cases - save the route state on the request as well,\n    // and restore it when the middleware is done\n    private runMiddlewareWithContext(\n        consumeRouteState: ExpressConsumedRouteState,\n        req: PatchedRequest,\n        fn: (...args: unknown[]) => unknown\n    ) {\n        Object.defineProperty(req, CONSUMED_ROUTE_STATE, {\n            value: consumeRouteState,\n            enumerable: false,\n            configurable: true,\n        });\n        const middlewareResult = context.with(context.active().setValue(CONSUMED_ROUTE_STATE, consumeRouteState), fn);\n        return middlewareResult;\n    }\n\n    private getCurrentRouteState(req: PatchedRequest): ExpressConsumedRouteState {\n        return (\n            (context.active().getValue(CONSUMED_ROUTE_STATE) as ExpressConsumedRouteState) ?? req[CONSUMED_ROUTE_STATE]\n        );\n    }\n}\n"]}