import { ExpressInstrumentationConfig } from './types';
import { InstrumentationBase, InstrumentationModuleDefinition } from '@opentelemetry/instrumentation';
import type express from 'express';
export declare class ExpressInstrumentation extends InstrumentationBase<typeof express> {
    static readonly supportedVersions: string[];
    protected _config: ExpressInstrumentationConfig;
    constructor(config?: ExpressInstrumentationConfig);
    setConfig(config?: ExpressInstrumentationConfig): void;
    protected init(): InstrumentationModuleDefinition<typeof express>;
    protected patch(moduleExports: typeof express, moduleVersion?: string): typeof express;
    protected unpatch(moduleExports: typeof express): void;
    private _patchExpressLayer;
    private _unpatchExpressLayer;
    private _getLayerHandleRequestPatch;
    private _getLayerHandleErrorPatch;
    private _recordException;
    private registerInstrumentationMiddleware;
    private getApplicationLazyRouterPatch;
    private getAppRouterHandlerPatch;
    private getRoutingStateOnConsumingPath;
    private runMiddlewareWithContext;
    private getCurrentRouteState;
}
//# sourceMappingURL=express.d.ts.map