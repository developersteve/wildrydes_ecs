{"version":3,"file":"layer-path.js","sourceRoot":"","sources":["../../../src/utils/layer-path.ts"],"names":[],"mappings":";;;;;;AACA,oEAAwC;AAGxC,MAAM,wBAAwB,GAAG,CAAC,SAAiB,EAAE,OAA8B,EAAU,EAAE;IAC3F,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,SAAS,KAAK,GAAG,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACjE,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACpD;IACD,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AAEF,iEAAiE;AACjE,2DAA2D;AAC3D,MAAM,mCAAmC,GAAG,CACxC,SAAc,EACd,OAAO,EACsC,EAAE;IAC/C,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;QAC/B,OAAO;YACH,iBAAiB,EAAE,SAAS;YAC5B,YAAY,EAAE,wBAAwB,CAAC,SAAS,EAAE,OAAO,CAAC;YAC1D,MAAM,EAAE,wBAAU,CAAC,SAAS,EAAE,EAAE,EAAE,OAAO,CAAC;SAC7C,CAAC;KACL;IAED,IAAI,SAAS,YAAY,MAAM;QAC3B,OAAO;YACH,iBAAiB,EAAE,SAAS;YAC5B,YAAY,EAAE,SAAS,CAAC,QAAQ,EAAE;YAClC,MAAM,EAAE,wBAAU,CAAC,SAAS,EAAE,EAAE,EAAE,OAAO,CAAC;SAC7C,CAAC;IAEN,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QAC1B,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;YACvC,iBAAiB,EAAE,eAAe;YAClC,YAAY,EACR,OAAO,eAAe,KAAK,QAAQ;gBAC/B,CAAC,CAAC,wBAAwB,CAAC,eAAe,EAAE,OAAO,CAAC;gBACpD,CAAC,CAAC,eAAe,YAAY,MAAM;oBACnC,CAAC,CAAC,eAAe,CAAC,QAAQ,EAAE;oBAC5B,CAAC,CAAC,SAAS;YACnB,MAAM,EAAE,wBAAU,CAAC,eAAe,EAAE,EAAE,EAAE,OAAO,CAAC;SACnD,CAAC,CAAC,CAAC;KACP;IAED,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AAEK,MAAM,wBAAwB,GAAG,CAAC,IAAS,EAAE,OAAY,EAAa,EAAE;IAC3E,MAAM,YAAY,GAAG,mCAAmC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxE,IAAI,CAAC,YAAY;QAAE,OAAO,SAAS,CAAC;IAEpC,OAAO;QACH,SAAS,EAAE,IAAI,KAAK,GAAG;QACvB,YAAY;QACZ,YAAY,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;YACrC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YACzD,CAAC,CAAC,YAAY,CAAC,YAAY;KAClC,CAAC;AACN,CAAC,CAAC;AAXW,QAAA,wBAAwB,4BAWnC","sourcesContent":["import { LayerPath, LayerPathAlternative } from '../types';\nimport pathRegexp from 'path-to-regexp';\nimport type express from 'express';\n\nconst pathStringToDisplayValue = (pathInput: string, options: express.RouterOptions): string => {\n    if (!options.strict && pathInput !== '/' && pathInput.endsWith('/')) {\n        return pathInput.substr(0, pathInput.length - 1);\n    }\n    return pathInput;\n};\n\n// get the first argument in calls like router.use('/path', ...),\n// handle the various types, and transform regexp to string\nconst getLayerPathAlternativeFromFirstArg = (\n    pathInput: any,\n    options\n): LayerPathAlternative | LayerPathAlternative[] => {\n    if (typeof pathInput === 'string') {\n        return {\n            userSuppliedValue: pathInput,\n            displayValue: pathStringToDisplayValue(pathInput, options),\n            regexp: pathRegexp(pathInput, [], options),\n        };\n    }\n\n    if (pathInput instanceof RegExp)\n        return {\n            userSuppliedValue: pathInput,\n            displayValue: pathInput.toString(),\n            regexp: pathRegexp(pathInput, [], options),\n        };\n\n    if (Array.isArray(pathInput)) {\n        return pathInput.map((alternativePath) => ({\n            userSuppliedValue: alternativePath,\n            displayValue:\n                typeof alternativePath === 'string'\n                    ? pathStringToDisplayValue(alternativePath, options)\n                    : alternativePath instanceof RegExp\n                    ? alternativePath.toString()\n                    : undefined,\n            regexp: pathRegexp(alternativePath, [], options),\n        }));\n    }\n\n    return undefined;\n};\n\nexport const getLayerPathFromFirstArg = (path: any, options: any): LayerPath => {\n    const alternatives = getLayerPathAlternativeFromFirstArg(path, options);\n    if (!alternatives) return undefined;\n\n    return {\n        fastSlash: path === '/',\n        alternatives,\n        displayValue: Array.isArray(alternatives)\n            ? JSON.stringify(alternatives.map((a) => a.displayValue))\n            : alternatives.displayValue,\n    };\n};\n"]}