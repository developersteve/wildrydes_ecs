{"version":3,"file":"route-context.js","sourceRoot":"","sources":["../../../src/utils/route-context.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpressConsumedRouteState, LayerPath } from '../types';\nimport parseurl from 'parseurl';\nimport type express from 'express';\n\nexport const getUsedPathFromLayerPath = (\n    layerPath: LayerPath,\n    actualUrl: string\n): { resolvedPath?: string; error?: string } => {\n    if (Array.isArray(layerPath?.alternatives)) {\n        const matchedAlternative = layerPath.alternatives.find((alternative) => alternative.regexp.exec(actualUrl));\n        if (!matchedAlternative) {\n            return { error: 'could not match url path to any of the registered path alternatives' };\n        }\n\n        const resolvedPath = matchedAlternative.displayValue;\n        if (resolvedPath === undefined) {\n            return { error: 'error while resolving path for matched alternative on paths array in express' };\n        }\n        return { resolvedPath };\n        // return layerPath.alternatives.map((alternative) => alternative.displayValue).toString();\n    } else {\n        const resolvedPath = layerPath?.alternatives?.displayValue;\n        if (resolvedPath === undefined) {\n            return { error: 'error while resolving path in express' };\n        }\n        return { resolvedPath };\n    }\n};\n\nexport const consumeLayerPathAndUpdateState = (\n    currentParts: ExpressConsumedRouteState,\n    req: express.Request,\n    currentLayerPath: LayerPath\n): ExpressConsumedRouteState => {\n    const currentReqPath = req.path;\n    const { resolvedPath, error: resolvedPathError } = getUsedPathFromLayerPath(\n        currentLayerPath,\n        currentParts.remainingRoute\n    );\n\n    if (resolvedPathError) {\n        return {\n            errors: [...(currentParts.errors ?? []), resolvedPathError],\n        };\n    }\n    const layerConfiguredPath = currentLayerPath?.displayValue;\n\n    const remainingRoute = req.route ? '' : currentReqPath === '/' ? '' : currentReqPath;\n    const resolvedRoute = !currentLayerPath.fastSlash\n        ? currentParts.resolvedRoute + resolvedPath\n        : currentParts.resolvedRoute;\n    const configuredRoute = !currentLayerPath.fastSlash\n        ? currentParts.configuredRoute + layerConfiguredPath\n        : currentParts.configuredRoute;\n    const params = { ...currentParts.params, ...req.params };\n\n    return {\n        resolvedRoute,\n        remainingRoute,\n        configuredRoute,\n        params,\n    };\n};\n\nexport const createInitialRouteState = (req: express.Request): ExpressConsumedRouteState => {\n    // at this point, we have the raw http req object, and not the express req.\n    // thus, we cannot call req.path\n    // we use parseurl(req).pathname which is exactly what express is doing\n    const path = parseurl(req).pathname;\n    return { resolvedRoute: '', remainingRoute: path, configuredRoute: '', params: {} };\n};\n"]}